#!/usr/bin/env bash

# Print script Usage 
function printUsage {
    echo -e ""
    echo -e "${BOLD}ROCmML Version ${VERSION}${END}"
    echo -e ""
    echo -e "${BOLD}Description:${END} ${FG_DARK_GRAY}${DESCRIPTION}${END}"
    echo -e ""
    echo -e "${BOLD}Usage: ${FG_GREEN}./ret${END} [<option>] "
    echo -e "       ${BOLD}${FG_GREEN}./ret${END} <command> "
    echo -e "${FG_YELLOW}e.g.${END}"
    echo -e "${FG_GREEN}./ret${END} install tensorflow"
    echo -e ""
    echo -e "${BOLD}command:${END}"
    echo -e "    [install] <package>      ${FG_LIGHT_BLUE}: Install ROCm or ML Framework TF/PT${END}"
    echo -e "    [remove]  <package>      ${FG_LIGHT_BLUE}: Remove ROCm or ML Framework TF/PT${END}"
    echo -e "    [update]  <package>      ${FG_LIGHT_BLUE}: Update ROCm or ML Framework TF/PT${END}"
    echo -e "    [validate]               ${FG_LIGHT_BLUE}: System validation${END}"
    echo -e "    [show]                   ${FG_LIGHT_BLUE}: Show system HW and SW details${END}"
    echo -e ""
    echo -e "${BOLD}packages:${END}"
    echo -e "    [rocm]                   ${FG_LIGHT_BLUE}: ROCm-dkms packages${END}"
    echo -e "    [tensorflow]             ${FG_LIGHT_BLUE}: Tensorflow framework${END}"
    echo -e "    [pytorch]                ${FG_LIGHT_BLUE}: Pytorch framework${END}"
    echo -e ""
    echo -e "${BOLD}Options:${END}"
    echo -e "    [-py2|-py3]              ${FG_LIGHT_BLUE}: Python version. Default is Python3${END}"
    echo -e "    [-h|--help]              ${FG_LIGHT_BLUE}: Show this help message${END}"
    echo -e "    [-v|--version]           ${FG_LIGHT_BLUE}: Show version of this package${END}"
    echo -e "    [-V|--verbose]           ${FG_LIGHT_BLUE}: Be verbose${END}"
    echo -e "    [-q|--quiet]             ${FG_LIGHT_BLUE}: Be quiet and omit progress indicators${END}"
    echo -e "    [-b|--benchmark]         ${FG_LIGHT_BLUE}: Run benchmark${END}"
    echo -e "    [-d|--dryrun]            ${FG_LIGHT_BLUE}: Show what would be happened${END}"
    echo -e ""
    echo -e "${BOLD}Note:${END}"
    echo -e "  ${FG_DARK_GRAY}xxxxxxxxxxxx xxxxxxxxxxxxxxxxxx xx xxxxxxxxxxxxxxxx...${END}"
    echo -e
}

# Parse script args
function parseArgs {
    local __cmd=""
    local __arg=""
    local __pkgs=()
    local __isPyRequired=1
    local __hasPY=1

    until [ $# = 0 ]
    do
      __arg="$1"
      case "$__arg" in
        -v | --version)
          printf "ROCmML version ${VERSION}\n"
          exit
         ;;

        -h | --help)
          printUsage
          exit
         ;;

        -py2)
          __pkgs+=("${__arg:1}"); editFile "${DEF_FILE}" "PYVER=\"py3\"" "PYVER=\"py2\""; __hasPY=0
          shift
        ;;

        -py3)
          __pkgs+=("${__arg:1}"); editFile "${DEF_FILE}" "PYVER=\"py2\"" "PYVER=\"py3\""; __hasPY=0
          shift
        ;;

        update)
          [[ $__cmd ]] && logPrint "ERR" "Only one command at time!"
          __cmd=$__arg
          shift
        ;;

        install)
          [[ $__cmd ]] && logPrint "ERR" "Only one command at time!"
          __cmd=$__arg
          shift
        ;;

        remove)
          [[ $__cmd ]] && logPrint "ERR" "Only one command at time!"
          __cmd=$__arg
          shift
        ;;

	    rocm)
          __pkgs+=("$__arg")
          shift
        ;;

        tensorflow | pytorch)
          __pkgs+=("$__arg"); __isPyRequired=0
          shift
        ;;

        *)
          printUsage
          exit
        ;;
      esac
    done

    # Include Python Package if required
    [ $__cmd = "install" ] && [ "${__isPyRequired}" -eq 0 ] && [ "${__hasPY}" -eq 1 ] && __pkgs=("${PYVER}" "${__pkgs[@]}") || __pkgs=("${PYVER}" ${__pkgs[@]/"${PYVER}"})

    # Run command
    [[ $__cmd ]] && cmdEngine "${__cmd}" __pkgs || { printUsage; exit; }
}

# Run command
# Input $1: command
# Input $2: args (packages)
function cmdEngine {
    local __cmd_cmdEngine=$1
    local -n __args=$2

    if [ "${#__args[@]}" -eq 0 ]; then printUsage; exit; fi
    case "$__cmd_cmdEngine" in
        update)
          echo "update pkgs..."
        ;;

        install)
          installCmd __args
	  exit
        ;;

        remove)
          removeCmd __args
	  exit
        ;;

        *)
          printUsage
          exit
        ;;
      esac
}

# Install packages
# Input $1: args (packages)
function installCmd {
    local -n __args_installCmd=$1
    local __pkg_ver_installCmd=()
    local __index=-1
    local __isROCmInstalled_installCmd=0
    local __isTFInstalled_installCmd=0
    local __isPTInstalled_installCmd=0
    local __isROCmIncluded_installCmd=1
    local __isROCmRequired_installCmd=1
    local __isTFRequired_installCmd=1
    local __isPTRequired_installCmd=1

    # Check system requirements
    checkSys
    
    # Reorder the pkgs array and insert rocm
    __args_installCmd=("rocm" ${__args_installCmd[@]/"rocm"})

	# Build Package Array
	for pkg in "${__args_installCmd[@]}"; do
	    case "$pkg" in
	        rocm)
		      buildPkgArray __args_installCmd __pkg_ver_installCmd "$pkg" __isROCmInstalled_installCmd
		      __isROCmIncluded_installCmd=0; __isROCmRequired_installCmd=0
		    ;;

	        tensorflow)
		      buildPkgArray __args_installCmd __pkg_ver_installCmd "$pkg" __isTFInstalled_installCmd
		      __isROCmRequired_installCmd=0; __isTFRequired_installCmd=0
		    ;;

	        pytorch)
		      buildPkgArray __args_installCmd __pkg_ver_installCmd "$pkg" __isPTInstalled_installCmd
		      __isROCmRequired_installCmd=0; __isPTRequired_installCmd=0
		    ;;

            py2 | py3)
              buildPkgArray __args_installCmd __pkg_ver_installCmd "$pkg" __isPTInstalled_installCmd
            ;;
	    esac
	done

    # Run pre installation
    [ "$__isROCmInstalled_installCmd" -eq "1" ] && rocmPreInstallation
	[ "$__isTFRequired_installCmd" -eq "0" ] && tfPreInstallation

    # Install the Packages if not already installed
    checkDeps __args_installCmd __pkg_ver_installCmd "Verifying ROCm Dependencies"

    # Run post installation
    [ "$__isROCmInstalled_installCmd" -eq "1" ] && rocmPostInstallation


    # Verify if ROCm installation was successful
    if (rocmVerification); then
		[ "$__isROCmInstalled_installCmd" -eq "1" ] && __msg_rocm="The ROCm installation was successful!" || __msg_rocm="It seems as if ROCm has already been properly installed!"
        logPrint "DONE" "${__msg_rocm}" 
    else
		logPrint "ERR" "The ROCm installation was not completed successfully!"
    fi 

    # Verify if TF installation was successful
    if (tfVerification); then
        [ "$__isTFInstalled_installCmd" -eq "1" ] && __msg_rocm="The Tensorflow installation was successful!" || __msg_rocm="It seems as if Tensorflow has already been properly installed!"
        logPrint "DONE" "${__msg_rocm}" 
    else
        logPrint "ERR" "The Tensorflow installation was not completed successfully!"
    fi 

}

# Run rocm pre installation
function rocmPreInstallation {
	# Add the ROCm apt repository
    wget -qO - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | apt-key add - >/dev/null 2>&1
    echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main' | tee /etc/apt/sources.list.d/rocm.list >/dev/null 2>&1
}

# Run rocm post installation
function rocmPostInstallation {
    # Add user to the video group
    usermod -a -G video $LOGNAME

    # Put the ROCm binaries in PATH
    echo 'export PATH=$PATH:/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin/x86_64' | sudo tee -a /etc/profile.d/rocm.sh >/dev/null 2>&1

    # force reboot required
    isRebootRequired true
}

# Run TF pre installation
function tfPreInstallation {
    # Uninstall any previously-installed tensorflow whl packages
    local __tf_pkg_tfPreInstallation=("tensorflow:${PYPI}")
    removePkg __tf_pkg_tfPreInstallation
}

# Verify if ROCm installation was successful 
function rocmVerification {
    local __cmd_ret_rocmVerification
    local __cmd_rocmVerification="/opt/rocm/bin/rocminfo"
    local __gpu_lshw
    local __gpu_clinfo
    local __key
    local __s='[[:space:]]*'
    local __ret_rocmVerification=1

    logPrint "STEP" "Verifing ROCm installation"
    
    # Get GPU info with lshw
    __key="product:"
    __gpu_lshw=$(lshw -C display| grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')

    # Get GPU info with rocminfo
    $__cmd_rocmVerification >/dev/null 2>&1
    __cmd_ret_rocmVerification="$?"
    checkReturn "$__cmd_ret_rocmVerification" "$__cmd_rocmVerification" "ERR"

    # Get GPU info with clinfo
    __cmd_rocmVerification="/opt/rocm/opencl/bin/x86_64/clinfo" 
    __key="Board name:"
    __gpu_clinfo=$($__cmd_rocmVerification | grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')
    __cmd_ret_rocmVerification="$?"
    checkReturn "$__cmd_ret_rocmVerification" "$__cmd_rocmVerification" "ERR"

    #if [ "$__gpu_lshw" = "$__gpu_clinfo" ]; then
    #    __ret_rocmVerification=0
    #fi

    __ret_rocmVerification=0
    return $__ret_rocmVerification;
}


# Verify if TF installation was successful 
function tfVerification {
    return $(isPrgInstalled "tensorflow-rocm:${PYPI}");
}


# Remove packages
# Input $1: args (packages)
function removeCmd {
    local -n __args_removeCmd=$1
    local __pkg_ver_removeCmd=()
    local __isROCmInstalled_removeCmd=0
    local __isTFInstalled_removeCmd=0
    local __isPTInstalled_removeCmd=0
    
    # read yaml file
    yaml2arr "$REQ_FILE" YAML_ARRAY

    # Build Package Array
    for pkg in "${__args_removeCmd[@]}"; do
        case "$pkg" in
            rocm)
              buildPkgArray __args_removeCmd __pkg_ver_removeCmd "$pkg" __isROCmInstalled_removeCmd
            ;;

            tensorflow)
              buildPkgArray __args_removeCmd __pkg_ver_removeCmd "$pkg" __isTFInstalled_removeCmd
            ;;

            pytorch)
              buildPkgArray __args_removeCmd __pkg_ver_removeCmd "$pkg" __isPTInstalled_removeCmd
            ;;
        esac
    done

    # Remove the packages
    TOTALSTEPS=1; logPrint "STEP" "Uninstalling Packages"
    removePkg __args_removeCmd

    # Verify if uninstall was successful
    for dep in "${__args_removeCmd[@]}"; do
        (isPrgInstalled "${dep}" ) && logPrint "ERR" "The uninstall process was not completed successfully!"
    done
}


# Build Package Array by key and check if packages already installed
# I/O $1: Package array and updated array
# Output $2: Package Version array
# Input  $3: Key
# Output $4: true if packages already installed
function buildPkgArray {
    local -n __pkg_buildPkgArray=$1
    local -n __ver_buildPkgArray=$2
    local __key_buildPkgArray=$3
    local __res_isInstalled_buildPkgArray=$4
    local __isInstalled_buildPkgArray=0
    local __deps_name_buildPkgArray=()
    local __deps_vers_buildPkgArray=()

    # Get ROCm install packages
    getYAMLValue "dependencies|${__key_buildPkgArray}|name" YAML_ARRAY __deps_name_buildPkgArray
    getYAMLValue "dependencies|${__key_buildPkgArray}|name|version" YAML_ARRAY __deps_vers_buildPkgArray

    # Check if pkgs are installed
    for dep in "${__deps_name_buildPkgArray[@]}"; do
        (isPrgInstalled "${dep}") || { __isInstalled_buildPkgArray=1; break; }
    done

    # Update packages array
    __pkg_buildPkgArray=("${__pkg_buildPkgArray[@]:1}" "${__deps_name_buildPkgArray[@]}");
    __ver_buildPkgArray=("${__ver_buildPkgArray[@]}" "${__deps_vers_buildPkgArray[@]}" );

    eval $__res_isInstalled_buildPkgArray="'$__isInstalled_buildPkgArray'"
}
