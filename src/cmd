#!/usr/bin/env bash
# start
# Print script Usage 
function printUsage {
    echo -e ""
    echo -e "${BOLD}ROCmML Version ${VERSION}${END}"
    echo -e ""
    echo -e "${BOLD}Description:${END} ${FG_DARK_GRAY}${DESCRIPTION}${END}"
    echo -e ""
    echo -e "${BOLD}Usage: ${FG_GREEN}./ret${END} [<option>] "
    echo -e "       ${BOLD}${FG_GREEN}./ret${END} <command> "
    echo -e "${BOLD}Example:${END}"
    echo -e "       ${BOLD}${FG_GREEN}./ret${END} install tensorflow"
    echo -e ""
    echo -e "${BOLD}command:${END}"
    echo -e "    [install]   <Package>              ${FG_LIGHT_BLUE}: Install ROCm or ML Framework TF/PT${END}"
    echo -e "    [remove]    <Package>              ${FG_LIGHT_BLUE}: Remove ROCm or ML Framework TF/PT${END}"
    echo -e "    [update]    <Package>              ${FG_LIGHT_BLUE}: Update ROCm or ML Framework TF/PT${END}"
    echo -e "    [validate]                         ${FG_LIGHT_BLUE}: System validation${END}"
    echo -e "    [benchmark] <Packages> <Model>     ${FG_LIGHT_BLUE}: Run benchmark for specific ML Framework${END}"
    echo -e "    [show]                             ${FG_LIGHT_BLUE}: Show system HW and SW details${END}"
    echo -e ""
    echo -e "${BOLD}Package:${END}"
    echo -e "    [rocm]                             ${FG_LIGHT_BLUE}: ROCm-dkms packages${END}"
    echo -e "    [tensorflow]                       ${FG_LIGHT_BLUE}: Tensorflow framework${END}"
    echo -e "    [pytorch]                          ${FG_LIGHT_BLUE}: Pytorch framework${END}"
    echo -e ""
    echo -e "${BOLD}Model:${END}"
    echo -e "    [vgg16]                            ${FG_LIGHT_BLUE}: vgg16 model${END}"
    echo -e "    [alexnet]                          ${FG_LIGHT_BLUE}: alexnet model${END}"
    echo -e "    [resnet50]                         ${FG_LIGHT_BLUE}: resnet50 model. Default Model${END}"
    echo -e ""
    echo -e "${BOLD}Options:${END}"
    echo -e "    [-py2|-py3]                        ${FG_LIGHT_BLUE}: Python version. Default is Python3${END}"
    echo -e "    [-h|--help]                        ${FG_LIGHT_BLUE}: Show this help message${END}"
    echo -e "    [-v|--version]                     ${FG_LIGHT_BLUE}: Show version of this package${END}"
    echo -e "    [-V|--verbose]                     ${FG_LIGHT_BLUE}: Be verbose${END}"
    echo -e "    [-q|--quiet]                       ${FG_LIGHT_BLUE}: Be quiet and omit progress indicators${END}"
    echo -e "    [-b|--benchmark]                   ${FG_LIGHT_BLUE}: Run benchmark${END}"
    echo -e "    [-d|--dryrun]                      ${FG_LIGHT_BLUE}: Show what would be happened${END}"
    echo -e ""
    echo -e "${BOLD}Note:${END}"
    echo -e "  ${FG_DARK_GRAY}xxxxxxxxxxxx xxxxxxxxxxxxxxxxxx xx xxxxxxxxxxxxxxxx...${END}"
    echo -e
}

# Parse script args
function parseArgs {
    local __cmd_parseArgs=""
    local __arg_parseArgs=""
    local __pkgs_parseArgs=()
    local __models_parseArgs=()
    local __isPyRequired_parseArgs=1
    local __hasPY_parseArgs=1

    until [ $# = 0 ]
    do
      __arg_parseArgs="$1"
      case "$__arg_parseArgs" in
        -v | --version)
          printf "ROCmML version ${VERSION}\n"
          exit
         ;;

        -h | --help)
          printUsage
          exit
         ;;

        -py2)
          __pkgs_parseArgs+=("${__arg_parseArgs:1}"); editFile "${DEF_FILE}" "PYVER=\"py3\"" "PYVER=\"py2\""; PYVER="py2"; __hasPY_parseArgs=0
          shift
        ;;

        -py3)
          __pkgs_parseArgs+=("${__arg_parseArgs:1}"); editFile "${DEF_FILE}" "PYVER=\"py2\"" "PYVER=\"py3\""; PYVER_parseArgs="py3"; __hasPY_parseArgs=0
          shift
        ;;

        update)
          [[ $__cmd_parseArgs ]] && logPrint "ERR" "Only one command at time!"
          __cmd_parseArgs=$__arg_parseArgs
          shift
        ;;

        install)
          [[ $__cmd_parseArgs ]] && logPrint "ERR" "Only one command at time!"
          __cmd_parseArgs=$__arg_parseArgs
          shift
        ;;

        remove)
          [[ $__cmd_parseArgs ]] && logPrint "ERR" "Only one command at time!"
          __cmd_parseArgs=$__arg_parseArgs
          shift
        ;;

        benchmark)
          [[ $__cmd_parseArgs ]] && logPrint "ERR" "Only one command at time!"
          __cmd_parseArgs=$__arg_parseArgs
          shift
        ;;

	    rocm)
          __pkgs_parseArgs+=("$__arg_parseArgs")
          shift
        ;;

        tensorflow | pytorch)
          __pkgs_parseArgs+=("$__arg_parseArgs"); __isPyRequired_parseArgs=0
          shift
        ;;

        vgg16 | alexnet | resnet50)
          __models_parseArgs+=("$__arg_parseArgs")
          shift
        ;;

        *)
          printUsage
          exit
        ;;
      esac
    done

    # Include Python Package if required
    if [ $__cmd_parseArgs = "install" ] && [ "${__isPyRequired_parseArgs}" -eq 0 ]; then 
        [ "${__hasPY_parseArgs}" -eq 1 ] && __pkgs_parseArgs=("${PYVER}" "${__pkgs_parseArgs[@]}") || __pkgs_parseArgs=("${PYVER}" ${__pkgs_parseArgs[@]/"${PYVER}"})
    fi

    # Exclude rocm if benchamrk
    [ $__cmd_parseArgs = "benchmark" ] && __pkgs_parseArgs=(${__pkgs_parseArgs[@]/"rocm"})
    
    # Run command
    [[ $__cmd_parseArgs ]] && cmdEngine "${__cmd_parseArgs}" __pkgs_parseArgs __models_parseArgs || { printUsage; exit; }
}

# Run command
# Input $1: command
# Input $2: args (packages)
# Input $3: models
function cmdEngine {
    local __cmd_cmdEngine=$1
    local -n __args_cmdEngine=$2
    local -n __models_cmdEngine=$3

    if [ "${#__args_cmdEngine[@]}" -eq 0 ]; then printUsage; exit; fi
    case "$__cmd_cmdEngine" in
        update)
          echo "update pkgs..."
        ;;

        install)
            installCmd __args_cmdEngine
            exit
        ;;

        remove)
            removeCmd __args_cmdEngine
            exit
        ;;

        benchmark)
            if [ "${#__models_cmdEngine[@]}" -eq 0 ]; then __models_cmdEngine=("$TF_MODEL"); fi
            benchmarkCmd __args_cmdEngine __models_cmdEngine
            exit
        ;;

        *)
            printUsage
            exit
        ;;
      esac
}

# Install packages
# Input $1: args (packages)
function installCmd {
    local -n __args_installCmd=$1
    local __pkg_name_installCmd=()
    local __pkg_ver_installCmd=()
    local __index=-1
    local __isROCmInstalled_installCmd=0
    local __isTFInstalled_installCmd=0
    local __isPTInstalled_installCmd=0
    local __isPYInstalled_installCmd=0

    # Check system requirements
    checkSys

    # Reorder the pkgs array and insert rocm
    __args_installCmd=("rocm" ${__args_installCmd[@]/"rocm"})

	# Build Package Array
	for pkg in "${__args_installCmd[@]}"; do
	    case "$pkg" in
	        rocm)
		      buildPkgArray "$pkg" __pkg_name_installCmd __pkg_ver_installCmd __isROCmInstalled_installCmd
              runInstall "ROCm" __pkg_name_installCmd __pkg_ver_installCmd "$__isROCmInstalled_installCmd"
		    ;;

	        tensorflow)
		      buildPkgArray "$pkg" __pkg_name_installCmd __pkg_ver_installCmd __isTFInstalled_installCmd
              	runInstall "Tensorflow" __pkg_name_installCmd __pkg_ver_installCmd "$__isTFInstalled_installCmd"
		    ;;

	        pytorch)
		      buildPkgArray "$pkg" __pkg_name_installCmd __pkg_ver_installCmd __isPTInstalled_installCmd
		    ;;

            py2 | py3)
              buildPkgArray "$pkg" __pkg_name_installCmd __pkg_ver_installCmd __isPYInstalled_installCmd
              runInstall "Python" __pkg_name_installCmd __pkg_ver_installCmd "$__isPYInstalled_installCmd"
            ;;
	    esac
	done
}

# Run Install Process
# Input $1: pkg name
# Input $2: pkg array
# Input $3: ver array
# Input $4: is pkgs already installed
function runInstall {
    local __pkg_name_runInstall=$1
    local -n __pkg_name_array_runInstall=$2
    local -n __pkg_vers_array_runInstall=$3
    local __isInstalled_runInstall=$4

    # Run pre installation
    [ "$__isInstalled_runInstall" -eq "1" ] && runPreInstallation "${__pkg_name_runInstall}"

    # Install the Packages if not already installed
    checkDeps __pkg_name_array_runInstall __pkg_vers_array_runInstall "Verifying ${__pkg_name_runInstall} Dependencies"

    # Run post installation
    [ "$__isInstalled_runInstall" -eq "1" ] && runPostInstallation "${__pkg_name_runInstall}"

    if (runVerification "$__pkg_name_runInstall"); then
        [ "$__isInstalled_runInstall" -eq "1" ] && __msg_rocm="The ${__pkg_name_runInstall} installation was successful!" || __msg_rocm="It seems as if ${__pkg_name_runInstall} has already been properly installed!"
        logPrint "DONE" "${__msg_rocm}"
    else
        logPrint "ERR" "The ${__pkg_name_runInstall} installation was not completed successfully!"
    fi
}

# Run pre installation
# Input $1: pkg name
function runPreInstallation {
    local __pkg_name_runPreInstallation="$1"

    case "$__pkg_name_runPreInstallation" in
        ROCm)
            # Add the ROCm apt repository
            startLoadBar "Run ${__pkg_name_runPreInstallation} Pre-Installation: Add the ROCm apt repository"; printf '\n'
            wget -qO - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | apt-key add - >/dev/null 2>&1
            echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main' | tee /etc/apt/sources.list.d/rocm.list >/dev/null 2>&1
            stopLoadBar
        ;;

        Tensorflow)
            # Uninstall any previously-installed tensorflow whl packages
            startLoadBar "Run ${__pkg_name_runPreInstallation} Pre-Installation: Uninstall previously-installed tensorflow"; printf '\n'
            local __tf_pkg_runPreInstallation=("tensorflow:${PYPI}")
            removePkg __tf_pkg_runPreInstallation
            stopLoadBar
        ;;

        Pytorch)
            echo "Pytorch Pre-Installation"
        ;;

        Python)
            echo "Python Pre-Installation"
        ;;
    esac
}

# Run post installation
# Input $1: pkg name
function runPostInstallation {
    local __pkg_name_runPostInstallation="$1"

    
    case "$__pkg_name_runPostInstallation" in
        ROCm)
            # Add user to the video group
            startLoadBar "Run ${__pkg_name_runPostInstallation} Post-Installation: Add user to the video group & put ROCm in PATH "; printf '\n'
            usermod -aG video $SUDO_USER

            # Put the ROCm binaries in PATH
            echo 'export PATH=$PATH:/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin/x86_64' | sudo tee -a /etc/profile.d/rocm.sh >/dev/null 2>&1
            source /etc/profile.d/rocm.sh >/dev/null 2>&1
            stopLoadBar
        ;;

        Tensorflow)
            echo "Tensorflow Post-Installation"
        ;;

        Pytorch)
            echo "Pytorch Post-Installation"
        ;;

        Python)
            echo "Python Post-Installation"
        ;;
    esac
}

# Run install verification
# Input $1: pkg name
function runVerification {
    local __pkg_name_runVerification="$1"

    case "$__pkg_name_runVerification" in
        ROCm)
            rocmVerification
            return "$?";
        ;;

        Tensorflow)
            tfVerification
            return "$?";
        ;;

        Pytorch)
            echo "Pytorch Verification"
        ;;

        Python)
            echo "Python Verification"
        ;;
    esac
}

# Verify if ROCm installation was successful 
function rocmVerification {
    local __cmd_ret_rocmVerification
    local __cmd_rocmVerification="/opt/rocm/bin/rocminfo"
    local __cmd_array_rocmVerification=()
    local __gpu_lshw
    local __gpu_clinfo
    local __key
    local __s='[[:space:]]*'
    local __ret_rocmVerification=1

    logPrint "STEP" "Verifing ROCm installation"
    startLoadBar "Run ROCm Verification"; printf '\n'
    # Get GPU info with lshw
    __key="product:"
    __gpu_lshw=$(lshw -C display| grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')

    # Get GPU info with rocminfo
    __cmd_array_rocmVerification=("$__cmd_rocmVerification"); runCmd __cmd_array_rocmVerification "ERR"

    # Get GPU info with clinfo
    __cmd_rocmVerification="/opt/rocm/opencl/bin/x86_64/clinfo" 
    __key="Board name:"
    __gpu_clinfo=$($__cmd_rocmVerification 2>/dev/null| grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')
    __cmd_ret_rocmVerification="$?"
    checkReturn "$__cmd_ret_rocmVerification" "$__cmd_rocmVerification" "ERR"

    #if [ "$__gpu_lshw" = "$__gpu_clinfo" ]; then
    #    __ret_rocmVerification=0
    #fi

    __ret_rocmVerification=0
    stopLoadBar

    return $__ret_rocmVerification;
}

# Verify if TF installation was successful 
function tfVerification {
    logPrint "STEP" "Verifing Tensorflow installation"
    if (isPrgInstalled "tensorflow-rocm:${PYPI}"); then
        if (confirmYn "Run Tensorflow benchmark? [Y/n] "); then
            startLoadBar "Run Tensorflow Verification"; printf '\n'
            local __models_runPostInstallation=("$TF_MODEL")
            runBenchmark "tensorflow" __models_runPostInstallation
            stopLoadBar
            return "$?"
        fi
        return 0;
    else
        return 1;
    fi
}

# Remove packages
# Input $1: args (packages)
function removeCmd {
    local -n __args_removeCmd=$1
    local __pkg_name_removeCmd=()
    local __pkg_ver_removeCmd=()
    local __isROCmInstalled_removeCmd=0
    local __isTFInstalled_removeCmd=0
    local __isPTInstalled_removeCmd=0
    local __isPYInstalled_removeCmd=0

    # read yaml file
    yaml2arr "$REQ_FILE" YAML_ARRAY

    TOTALSTEPS="${#__args_removeCmd[@]}";

    # Build Package Array
    for pkg in "${__args_removeCmd[@]}"; do
        case "$pkg" in
            rocm)
              buildPkgArray "$pkg" __pkg_name_removeCmd __pkg_ver_removeCmd __isROCmInstalled_removeCmd
              runRemove "ROCm" __pkg_name_removeCmd __pkg_ver_removeCmd "$__isROCmInstalled_removeCmd"
            ;;

            tensorflow)
              buildPkgArray "$pkg" __pkg_name_removeCmd __pkg_ver_removeCmd __isTFInstalled_removeCmd
              runRemove "Tensorflow" __pkg_name_removeCmd __pkg_ver_removeCmd "$__isTFInstalled_removeCmd"
            ;;

            pytorch)
              buildPkgArray "$pkg" __pkg_name_removeCmd __pkg_ver_removeCmd __isPTInstalled_removeCmd
            ;;

            py2 | py3)
              buildPkgArray "$pkg" __pkg_name_removeCmd __pkg_ver_removeCmd __isPYInstalled_removeCmd
              runRemove "Python" __pkg_name_removeCmd __pkg_ver_removeCmd "$__isPYInstalled_removeCmd"
            ;;
        esac
    done
}

# Run Remove Process
# Input $1: pkg name
# Input $2: pkg array
# Input $3: ver array
# Input $4: is pkgs already installed
function runRemove {
    local __pkg_name_runRemove=$1
    local -n __pkg_name_array_runRemove=$2
    local -n __pkg_vers_array_runRemove=$3
    local __isInstalled_runRemove=$4


    logPrint "STEP" "Uninstalling ${__pkg_name_runRemove} Packages"
    removePkg __pkg_name_array_runRemove

    # Verify if uninstall was successful
    for dep in "${__pkg_name_array_runRemove[@]}"; do
        (isPrgInstalled "${dep}" ) && logPrint "ERR" "The uninstall process was not completed successfully!"
    done
}

# Build Package Array by key and check if packages already installed
# I/O $1: Package array and updated array
# Output $2: Package Version array
# Input  $3: Key
# Output $4: true if packages already installed
function buildPkgArray {
    local __key_buildPkgArray=$1
    local __res_pkg_buildPkgArray=$2
    local __res_ver_buildPkgArray=$3
    local __res_isInstalled_buildPkgArray=$4
    local __isInstalled_buildPkgArray=0
    local __deps_name_buildPkgArray=()
    local __deps_vers_buildPkgArray=()

    # Get ROCm install packages
    getYAMLValue "dependencies|${__key_buildPkgArray}|name" YAML_ARRAY __deps_name_buildPkgArray
    getYAMLValue "dependencies|${__key_buildPkgArray}|name|version" YAML_ARRAY __deps_vers_buildPkgArray

    # Check if pkgs are installed
    for dep in "${__deps_name_buildPkgArray[@]}"; do
        (isPrgInstalled "${dep}") || { __isInstalled_buildPkgArray=1; break; }
    done

    # Update packages array
    #__pkg_buildPkgArray=("${__pkg_buildPkgArray[@]:1}" "${__deps_name_buildPkgArray[@]}");
    #__ver_buildPkgArray=("${__ver_buildPkgArray[@]}" "${__deps_vers_buildPkgArray[@]}");
    eval $__res_pkg_buildPkgArray="(${__deps_name_buildPkgArray[@]})"
    eval __res_ver_buildPkgArray="(${__deps_vers_buildPkgArray[@]})"
    eval $__res_isInstalled_buildPkgArray="'$__isInstalled_buildPkgArray'"    
}

# ML benchmark
# Input $1: args (packages)
# Input $2: models
function benchmarkCmd {
    local -n __args_benchmarkCmd=$1
    local -n __models_benchmarkCmd=$2

    local __pkg_name_benchmarkCmd=()
    local __pkg_ver_benchmarkCmd=()
    local __isROCmInstalled_removeCmd=0
    local __isTFInstalled_benchmarkCmd=0
    local __isPTInstalled_benchmarkCmd=0

    startLoadBar "Check ROCm Installation"; printf '\n'; echo
    # read yaml file
    yaml2arr "$REQ_FILE" YAML_ARRAY
    TOTALSTEPS="${#__models_benchmarkCmd[@]}";
    buildPkgArray "rocm" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isROCmInstalled_benchmarkCmd
    stopLoadBar

    [ "$__isROCmInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "ROCm is not installed!" "ROCm"

    # Build Package Array
    for ml in "${__args_benchmarkCmd[@]}"; do
        case "$ml" in
            tensorflow)
              logPrint "STEP" "Run ${ml} benchmark"
              buildPkgArray "$ml" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isTFInstalled_benchmarkCmd
              [ "$__isTFInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "Tensorflow is not installed!" "Tensorflow"
              runBenchmark "$ml" __models_benchmarkCmd
            ;;

            pytorch)
              buildPkgArray "$ml" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isPTInstalled_benchmarkCmd
              [ "$__isPTInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "Pytorch is not installed!" "Pytorch"
            ;;
        esac
    done
}

# Run benchmark 
#Input $1 ML framework
#Input $2 Models array
function runBenchmark {
    local __ml_framework_runBenchmark=$1
    local -n __models_runBenchmark=$2
    local __cmd_ret_runBenchmark
    local __ret_value_runBenchmark=0

    case "$__ml_framework_runBenchmark" in
            tensorflow)
                if [ ! -d "$WORK_DIRECTRORY/tf" ]; then
                    local __cmd_python_runBenchmark

                    git clone -b "$TF_BNCH_VER" "$TF_BENCHMARKS_URL" "$WORK_DIRECTRORY/tf/" >/dev/null 2>&1
                    checkReturn "$?" "git clone -b $TF_BNCH_VER $TF_BENCHMARKS_URL $WORK_DIRECTRORY/tf/" "WARN"
                fi

                # Run the training benchmark (e.g. ResNet-50)
                [ "$PYVER" = "py2" ] && __cmd_python_runBenchmark="python" || __cmd_python_runBenchmark="python3"
                for model in "${__models_runBenchmark[@]}"; do
                    TF_MODEL=$model
                    startLoadBar "Run ${TF_MODEL} benchmark"; printf '\n'
                    $__cmd_python_runBenchmark "$WORK_DIRECTRORY/tf/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py" --model="$TF_MODEL" --num_gpus="$NUM_GPUS" --batch_size="$BATCH_SIZE" --use_fp16=True
                    __cmd_ret_runBenchmark="$?"
                    [ "$__cmd_ret_runBenchmark" -eq 0 ] && stopLoadBar "${TF_MODEL} benchmark Done" || { stopLoadBar "${TF_MODEL} benchmark Failed" "ERR"; __ret_value_runBenchmark=1; }
                done
                return $__ret_value_runBenchmark;
            ;;

            pytorch)
                echo "Pytorch benchmarking..."
            ;;
        esac
}
