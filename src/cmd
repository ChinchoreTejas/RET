#!/usr/bin/env bash
# start
# Print script Usage
function printUsage {
    echo -e ""
    echo -e "${BOLD}ROCmML Version ${RET_VERSION}${END}"
    echo -e ""
    echo -e "${BOLD}Description:${END} ${FG_DARK_GRAY}${DESCRIPTION}${END}"
    echo -e ""
    echo -e "${BOLD}Usage: ${FG_GREEN}./ret${END} [<option>]"
    echo -e "       ${BOLD}${FG_GREEN}./ret${END} <command> [<option>]"
    echo -e "${BOLD}Example:${END}"
    echo -e "       ${BOLD}${FG_GREEN}./ret${END} install tensorflow"
    echo -e ""
    echo -e "${BOLD}command:${END}"
    echo -e "    [install]   <Package>              ${FG_LIGHT_BLUE}: Install ROCm or ML Framework TF/PT${END}"
    echo -e "    [remove]    <Package>              ${FG_LIGHT_BLUE}: Remove ROCm or ML Framework TF/PT${END}"
    echo -e "    [update]    <Package>              ${FG_LIGHT_BLUE}: Update ROCm or ML Framework TF/PT${END}"
    echo -e "    [validate]                         ${FG_LIGHT_BLUE}: System validation${END}"
    echo -e "    [benchmark] <Packages> <Model>     ${FG_LIGHT_BLUE}: Run benchmark for specific ML Framework${END}"
    echo -e "    [show]                             ${FG_LIGHT_BLUE}: Show system HW and SW details${END}"
    echo -e "    [build] <Container> <ImageName>    ${FG_LIGHT_BLUE}: Build ROCm Container either with Docker or Singularity${END}"
    echo -e ""
    echo -e "${BOLD}Package:${END}"
    echo -e "    [rocm]                             ${FG_LIGHT_BLUE}: ROCm-dkms packages${END}"
    echo -e "    [tensorflow]                       ${FG_LIGHT_BLUE}: Tensorflow framework${END}"
    echo -e "    [pytorch]                          ${FG_LIGHT_BLUE}: Pytorch framework${END}"
    echo -e ""
    echo -e "${BOLD}Container:${END}"
    echo -e "    [docker]                           ${FG_LIGHT_BLUE}: Build Docker Container${END}"
    echo -e "    [singularity]                      ${FG_LIGHT_BLUE}: Build Singularity Container${END}"
    echo -e "    [ImageName]                        ${FG_LIGHT_BLUE}: Choosing an OS Base Image from [ubuntu:16.04, ubuntu:18.04, centos:7] Default is [ubuntu:18.04]${END}"
    echo -e ""
    echo -e "${BOLD}Model:${END}"
    echo -e "    [vgg16]                            ${FG_LIGHT_BLUE}: vgg16 model${END}"
    echo -e "    [alexnet]                          ${FG_LIGHT_BLUE}: alexnet model${END}"
    echo -e "    [resnet50]                         ${FG_LIGHT_BLUE}: resnet50 model. Default Model${END}"
    echo -e ""
    echo -e "${BOLD}Options:${END}"
    echo -e "    [-py2|-py3]                        ${FG_LIGHT_BLUE}: Define the Python version. Default is [Python3]${END}"
    echo -e "    [-h|--help]                        ${FG_LIGHT_BLUE}: Show this help message${END}"
    echo -e "    [-v|--version]                     ${FG_LIGHT_BLUE}: Show version of this package${END}"
    echo -e "    [--dryrun]                         ${FG_LIGHT_BLUE}: Show what would be happened${END}"
    echo -e "    [-d|--debug]                       ${FG_LIGHT_BLUE}: Enable Debug Mode${END}"
    echo -e "    [-V|--verbose]                     ${FG_LIGHT_BLUE}: Be verbose${END}"
    echo -e "    [-q|--quiet]                       ${FG_LIGHT_BLUE}: Be quiet and omit progress indicators${END}"
    echo -e "    [-y|--yes]                         ${FG_LIGHT_BLUE}: Skip confirmation message${END}"
    echo -e "    [-ns|--nsc]                        ${FG_LIGHT_BLUE}: Skip system check steps${END}"
    echo -e "    [-nv|--nov]                        ${FG_LIGHT_BLUE}: Skip verification steps${END}"
    echo -e "    [-ic|--incontainer]                ${FG_LIGHT_BLUE}: Run RET on top of Container${END}"
    echo -e ""
    echo -e "${BOLD}Note:${END}"
    echo -e "  ${FG_DARK_GRAY}xxxxxxxxxxxx xxxxxxxxxxxxxxxxxx xx xxxxxxxxxxxxxxxx...${END}"
    echo -e
}

# Parse script args
function parseArgs {
    local __cmd_parseArgs=""
    local __arg_parseArgs=""
    local __pkgs_parseArgs=()
    local __options_parseArgs=()
    local __isPyRequired_parseArgs=1
    local __isROCmRequired_parseArgs=1
    local __hasPY_parseArgs=1

    until [ $# = 0 ]
    do
        __arg_parseArgs="$1"

        case "$__arg_parseArgs" in
            # Print Version #######################################################################
            "-v" | "--version")
              printf "ROCmML version ${RET_VERSION}\n"
              exit
             ;;

            # Print Help ##########################################################################
            "-h" | "--help")
              printUsage
              exit
            ;;

            # Force YES ###########################################################################
            "-y" | "--yes")
              FORCEYES=true
              shift
            ;;

            # Debug mode ###########################################################################
            "-d" | "--debug")
              DEBUG=true
              shift
            ;;

            # Skip System Check ###################################################################
            "-ns" | "--nsc")
              SKIPSYSC=true
              shift
            ;;

            # Skip Verification ###################################################################
            "-nv" | "--nov")
              SKIPVERI=true
              shift
            ;;

            # RET on top of Container ###################################################################
            "-ic" | "--incontainer")
              SKIPVERI=true; SKIPSYSC=true; INCONTAINER=true; SUDO_USER="root"; FG_DEFAULT_COLOR="${FG_ORANGE}"
              shift
            ;;

            # Set Python Version ##################################################################
            "-py2" | "-py3")
              __pkgs_parseArgs+=("${__arg_parseArgs:1}"); editFile "${DEF_FILE}" "PYVER=.*$" "PYVER=\"${__arg_parseArgs:1}\""; PYVER="${__arg_parseArgs:1}"; __hasPY_parseArgs=0
              shift
            ;;

            # Install ROCm from URL ###############################################################
            "-s")
              [ -z "$2" ] && { printUsage; exit; }
              [ "$RET_DISTRO" = "Ubuntu" ] && ROCM_DEB="$2" || ROCM_RPM="$2"
              shift; shift
            ;;

            # Set Command #########################################################################
            "install" | "update" | "remove" | "benchmark" | "build")
              [[ $__cmd_parseArgs ]] && logPrint "ERR" "Only one command at time!"
              __cmd_parseArgs=$__arg_parseArgs
              shift
            ;;

            # Set Packages ########################################################################
            "rocm" | "tensorflow" | "pytorch")
                # Permitted commands: install, remove and update
                if [[ ! "$__cmd_parseArgs" =~ ^("install"|"update"|"remove"|"benchmark")$ ]]; then logPrint "ERR" "Wrong command! Did you mean: $0 install $__arg_parseArgs"; exit; fi
                if [[ "$__arg_parseArgs" =~ ^("tensorflow"|"pytorch")$ ]]; then 
                    __isPyRequired_parseArgs=0; 
                    [ "${__cmd_parseArgs}" = "install" ] && __isROCmRequired_parseArgs=0; 
                fi
                __pkgs_parseArgs+=("$__arg_parseArgs");
              shift
            ;;

            "docker" | "singularity")
                # Permitted commands: install, remove and update
                if [[ ! "$__cmd_parseArgs" == "build" ]]; then logPrint "ERR" "Wrong command! Did you mean: $0 build $__arg_parseArgs"; exit; fi
                [[ $__pkgs_parseArgs ]] && logPrint "ERR" "Only one container at time!"
              __pkgs_parseArgs="$__arg_parseArgs";
              shift
            ;;

            "vgg16" | "alexnet" | "resnet50" | "ubuntu:16.04" | "ubuntu:18.04" | "centos:7")
                # Permitted commands: benchmark
                if [[ "$__arg_parseArgs" =~ ^("vgg16"|"alexnet"|"resnet50")$ ]]; then if [[ ! "$__cmd_parseArgs" == "benchmark" ]]; then 
                    logPrint "ERR" "Wrong command! Did you mean: $0 benchmark tensorflow $__arg_parseArgs"; exit; fi
                else
                    if [[ ! "$__cmd_parseArgs" == "build" ]]; then logPrint "ERR" "Wrong command! Did you mean: $0 build docker $__arg_parseArgs"; exit; fi
                fi
              __options_parseArgs+=("$__arg_parseArgs")
              shift
            ;;

            # Not supported args ##################################################################
            *)
              printUsage
              exit
            ;;
        esac
    done

    # Include Python Package if required
    if [ "$__cmd_parseArgs" = "install" ] && [ "${__isPyRequired_parseArgs}" -eq 0 ]; then 
        [ "${__hasPY_parseArgs}" -eq 1 ] && __pkgs_parseArgs=("${PYVER}" "${__pkgs_parseArgs[@]}") || __pkgs_parseArgs=("${PYVER}" ${__pkgs_parseArgs[@]/"${PYVER}"})
    fi

    # Run command
    if [ "${__isROCmRequired_parseArgs}" -eq 0 ]; then __pkgs_parseArgs=("rocm" ${__pkgs_parseArgs[@]/"rocm"}); fi
    [[ "$__cmd_parseArgs" ]] && cmdEngine "${__cmd_parseArgs}" __pkgs_parseArgs __options_parseArgs || { printUsage; exit; }
}

# Run command
# Input $1: command
# Input $2: args (packages)
# Input $3: options
function cmdEngine {
    local __cmd_cmdEngine=$1
    local -n __args_cmdEngine=$2
    local -n __options_cmdEngine=$3

    if [ "${#__args_cmdEngine[@]}" -eq 0 ]; then printUsage; exit; fi

    # YAML Pre-installation requirements
    preRequirement

    toLog "CMD" "$__cmd_cmdEngine ${__args_cmdEngine[@]} [cmdEngine]"
    case "$__cmd_cmdEngine" in
        update)
          echo "Update Command not yet implemented"
        ;;

        install)
            installCmd __args_cmdEngine
            exit
        ;;

        remove)
            removeCmd __args_cmdEngine
            exit
        ;;

        benchmark)
            __args_cmdEngine=(${__args_cmdEngine[@]/"rocm"}) # Exclude rocm
            if [ "${#__args_cmdEngine[@]}" -eq 0 ]; then printUsage; exit; fi
            benchmarkCmd __args_cmdEngine __options_cmdEngine
            exit
        ;;   

        build)
            buildContainer __args_cmdEngine __options_cmdEngine
            exit
        ;;

        *)
            printUsage
            exit
        ;;
      esac
}

# Install packages
# Input $1: args (packages)
function installCmd {
    local -n __args_installCmd=$1

	# Install Packages
	for pkg in "${__args_installCmd[@]}"; do
	    case "$pkg" in
	        rocm)
                checkSys; # Check system requirements
		    ;;
	    esac
        # Install Package
        runInstall "$pkg"
	done
}

# Run Install Process
# Input $1: pkg name
function runInstall {
    local __pkg_name_runInstall="$1"
    local __pkg_name_array_runInstall=()
    local __pkg_vers_array_runInstall=()
    local __isInstalled_runInstall=0
    local __cmd_array_runInstall=()

    # Get packages
    buildPkgArray "$__pkg_name_runInstall" __pkg_name_array_runInstall __pkg_vers_array_runInstall __isInstalled_runInstall

    # Run pre installation if required
    [ "$__isInstalled_runInstall" -eq "1" ] && runPreInstallation "${__pkg_name_runInstall}" __pkg_name_array_runInstall __pkg_vers_array_runInstall

    # Install the Packages if not already installed
    checkDeps __pkg_name_array_runInstall __pkg_vers_array_runInstall "Verifying ${__pkg_name_runInstall} Dependencies"

    # This will be removed in the next release
    if [ "$__pkg_name_runInstall" = "singularity" ]; then 
        __cmd_array_runInstall=("singularity --version");
        runCmd __cmd_array_runInstall "ERR" 0 || installSingularity;
    fi


    # Run post installation
    [ "$__isInstalled_runInstall" -eq "1" ] && runPostInstallation "${__pkg_name_runInstall}"

    # Run verification
    runVerification "$__pkg_name_runInstall"

    if [ $? -eq 0 ]; then
        [ "$__isInstalled_runInstall" -eq "1" ] && __msg_rocm="The ${__pkg_name_runInstall} installation was successful!" || __msg_rocm="It seems as if ${__pkg_name_runInstall} has already been properly installed!"
        logPrint "DONE" "${__msg_rocm}"
    elif [ $? -eq 7 ]; then
        exitAll 7
    else
        logPrint "ERR" "The ${__pkg_name_runInstall} installation was not completed successfully!"
    fi
}

# Run pre installation
# Input $1: pkg name
# I/O   $2: pkg Name array
# I/O   $3: pkg Version array
function runPreInstallation {
    local __pkg_name_runPreInstallation="$1"
    local -n __pkg_name_arr_runPreInstallation="$2"
    local -n __pkg_vers_arr_runPreInstallation="$3"

    local __repo_path_runPreInstallation
    local __repo_text_runPreInstallation

    case "$__pkg_name_runPreInstallation" in
        rocm)
            # Add the ROCm apt repository
            addROCmRepo
        ;;

        tensorflow)
            # Uninstall any previously-installed tensorflow whl packages
            startLoadBar "Run ${__pkg_name_runPreInstallation} Pre-Installation: Uninstall previously-installed tensorflow"; printf '\n'
            local __tf_pkg_runPreInstallation=("tensorflow:${PYPI}"); removePkg __tf_pkg_runPreInstallation
            stopLoadBar
        ;;

        pytorch)
            # Download Pytorch whl package
            [ "$PYVER" = "py2" ] && __pytorch_pkg_name_runPreInstallation="$PYT_PKG_PY2" || __pytorch_pkg_name_runPreInstallation="$PYT_PKG_PY3"
            downloadFile "$WHL_URL$RET_DISTRO$RET_RELEASE-$__pytorch_pkg_name_runPreInstallation" "$TEMP_DIRECTRORY" "ERR" "Download Pytorch whl package"
            mv "$TEMP_DIRECTRORY/$RET_DISTRO$RET_RELEASE-$__pytorch_pkg_name_runPreInstallation" "$__pytorch_pkg_name_runPreInstallation"

            # Exclude torch pkg and insert the new pkg name
            removeFromArray "torch" __pkg_name_arr_runPreInstallation __pkg_vers_arr_runPreInstallation
            eval __pkg_name_arr_runPreInstallation="(${__pkg_name_arr_runPreInstallation[@]} $__pytorch_pkg_name_runPreInstallation:${PYPI})"
        ;;

        py2 | py3)
            PRE="DONOTHING"
        ;;

        docker)
            addDockerRepo "https://download.docker.com/linux"
            echo ''; confirmYn "Uninstall old Docker versions? [Y/n] " || logPrint "ERR" "Uninstall Docker" "Docker" "${FAIL}"
            local __docker_pkg_runPreInstallation=("docker-*"); removePkg __docker_pkg_runPreInstallation
        ;;

        singularity)
            PRE="DONOTHING"
        ;;
    esac
}

# Add the ROCm repository
function addROCmRepo {
    startLoadBar "Run ROCm Pre-Installation: Add the ROCm apt repository"; printf '\n'
    case "$RET_DISTRO" in
        Ubuntu)
            __cmd_array_addROCmRepo=("wget -qO - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | apt-key add -"); runCmd __cmd_array_addROCmRepo "ERR"
            __cmd_array_addROCmRepo=("echo -e 'deb [arch=amd64 trusted=yes] ${ROCM_DEB}' | tee ${Ubuntu_ROCM_REPO}"); runCmd __cmd_array_addROCmRepo "ERR"
        ;;

        CentOS)
            __cmd_array_addROCmRepo=("echo -e '[ROCm]\nname=ROCm\nbaseurl=${ROCM_RPM}\nenabled=1\ngpgcheck=0' | tee ${CentOS_ROCM_REPO}"); 
            runCmd __cmd_array_addROCmRepo "ERR"
        ;;
    esac
    stopLoadBar
}

# Add the Docker repository
# Input $1 url
function addDockerRepo {
    local __url_addRepo="$1"
    local __cmd_array_addDockerRepo=()

    startLoadBar "Run Docker Pre-Installation: Add the Docker apt repository"; printf '\n'
    case "$RET_DISTRO" in
        Ubuntu)
            __cmd_array_addDockerRepo=("wget -qO - ${__url_addRepo}/ubuntu/gpg | apt-key add -"); 
            runCmd __cmd_array_addDockerRepo "ERR"

            __cmd_array_addDockerRepo=("add-apt-repository 'deb [arch=amd64 trusted=yes] ${__url_addRepo}/ubuntu $(lsb_release -cs) stable'"); 
            runCmd __cmd_array_addDockerRepo "ERR"
        ;;

        CentOS)
            __cmd_array_addDockerRepo=("yum-config-manager --add-repo ${__url_addRepo}/centos/docker-ce.repo"); 
            runCmd __cmd_array_addDockerRepo "ERR"
        ;;
    esac
    stopLoadBar
}

# Run post installation
# Input $1: pkg name
function runPostInstallation {
    local __pkg_name_runPostInstallation="$1"
    local __cmd_array_runPostInstallation=()

    case "$__pkg_name_runPostInstallation" in
        rocm)
            # Add user to the video group
            startLoadBar "Run ${__pkg_name_runPostInstallation} Post-Installation: Add user to the video group & put ROCm in PATH "; printf '\n'
            usermod -aG video $SUDO_USER

            # Put the ROCm binaries in PATH
            __cmd_array_runPostInstallation=("echo 'export PATH=$PATH:/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin/x86_64' | tee -a /etc/profile.d/rocm.sh"); 
            runCmd __cmd_array_runPostInstallation "ERR"


            __cmd_array_runPostInstallation=("source /etc/profile.d/rocm.sh"); runCmd __cmd_array_runPostInstallation "ERR"
            stopLoadBar
        ;;

        tensorflow)
            POST="DONOTHING"
        ;;

        pytorch)
            POST="DONOTHING"
        ;;

        py2 | py3)
            POST="DONOTHING"
        ;;

        docker)
            __cmd_array_runPostInstallation=("systemctl start docker"); runCmd __cmd_array_runPostInstallation "ERR"
            __cmd_array_runPostInstallation=("systemctl enable docker"); runCmd __cmd_array_runPostInstallation "ERR"
        ;;

        singularity)
            POST="DONOTHING"
        ;;
    esac
}

# Run install verification
# Input $1: pkg name
function runVerification {
    [ "${SKIPVERI}" = "true" ] && return 0;

    local __pkg_name_runVerification="$1"
    local __cmd_array_runVerification=()

    case "$__pkg_name_runVerification" in
        rocm)
            rocmVerification
            return "$?";
        ;;

        tensorflow)
            tfVerification
            return "$?";
        ;;

        pytorch)
            echo "Pytorch Verification"
        ;;

        py2)
            logPrint "NOTE" "The Current Python Version is: `python -V`"
        ;;
        py3)
            logPrint "NOTE" "The Current Python Version is: `python3 -V`"
        ;;

        docker)
            systemctl start docker; DOCKER_VERSION=$(docker version --format '{{.Server.Version}}')
            return "$?";
        ;;

        singularity)
            logPrint "NOTE" "The Current `singularity --version`"
            __cmd_array_runVerification=("singularity --version"); runCmd __cmd_array_runVerification "ERR" 0; return "$?";
        ;;
    esac
}

# Verify if ROCm installation was successful 
function rocmVerification {
    local __cmd_ret_rocmVerification
    local __cmd_rocmVerification="/opt/rocm/bin/rocminfo"
    local __cmd_array_rocmVerification=()
    local __gpu_lshw
    local __gpu_clinfo
    local __key
    local __s='[[:space:]]*'
    local __ret_rocmVerification=1

    logPrint "STEP" "Verifing ROCm installation"
    startLoadBar "Run ROCm Verification"; printf '\n'; 
    # Get GPU info with lshw
    __key="product:"
    __gpu_lshw=$(lshw -C display -quiet | grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')

    # Get GPU info with rocminfo
    __cmd_array_rocmVerification=("$__cmd_rocmVerification"); runCmd __cmd_array_rocmVerification "ERR" 0
    __cmd_ret_rocmVerification="$?"
    [ "$__cmd_ret_rocmVerification" -ne 0 ] && { isRebootRequired 1; stopLoadBar; return 7; }

    # Get GPU info with clinfo
    __cmd_rocmVerification="/opt/rocm/opencl/bin/x86_64/clinfo" 
    __key="Board name:"
    __gpu_clinfo=$($__cmd_rocmVerification 2>/dev/null| grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')
    __cmd_ret_rocmVerification="$?"
    [ "$__cmd_ret_rocmVerification" -ne 0 ] && { isRebootRequired 1; stopLoadBar; return 7; }

    #if [ "$__gpu_lshw" = "$__gpu_clinfo" ]; then
    #    __ret_rocmVerification=0
    #fi

    __ret_rocmVerification=0
    stopLoadBar

    return $__ret_rocmVerification;
}

# Verify if TF installation was successful 
function tfVerification {
    logPrint "STEP" "Verifing Tensorflow installation"
    if (isPrgInstalled "tensorflow-rocm:${PYPI}"); then
        if (confirmYn "Run Tensorflow benchmark? [Y/n] "); then
            startLoadBar "Run Tensorflow Verification"; printf '\n'
            local __models_runPostInstallation=("$TF_MODEL")
            runBenchmark "tensorflow" __models_runPostInstallation
            stopLoadBar
            return "$?"
        fi
        return 0;
    else
        return 1;
    fi
}

# Remove packages
# Input $1: args (packages)
function removeCmd {
    local -n __args_removeCmd=$1

    # Remove Packages
    for pkg in "${__args_removeCmd[@]}"; do
        runRemove "$pkg"
    done
}

# Run Remove Process
# Input $1: pkg name
# Input $2: pkg array
# Input $3: ver array
# Input $4: is pkgs already installed
function runRemove {
    local __pkg_name_runRemove="$1"
    local __pkg_name_array_runRemove=()
    local __pkg_vers_array_runRemove=()
    local __isInstalled_runRemove=0

    logPrint "STEP" "Uninstalling ${__pkg_name_runRemove} Packages"

    # Get packages
    buildPkgArray "$__pkg_name_runRemove" __pkg_name_array_runRemove __pkg_vers_array_runRemove __isInstalled_runRemove
    removePkg __pkg_name_array_runRemove


    # Verify if uninstall was successful
    for dep in "${__pkg_name_array_runRemove[@]}"; do
        (isPrgInstalled "${dep}" ) && logPrint "ERR" "The uninstall process was not completed successfully!"
    done
}

# Build Package Array by key and check if packages already installed
# Input  $1: Key
# Output $2: Package array and updated array
# Output $3: Package Version array
# Output $4: true if packages already installed
function buildPkgArray {
    local __key_buildPkgArray=$1
    local __res_pkg_buildPkgArray=$2
    local __res_ver_buildPkgArray=$3
    local __res_isInstalled_buildPkgArray=$4
    local __isInstalled_buildPkgArray=0
    local __deps_name_buildPkgArray=()
    local __deps_vers_buildPkgArray=()
    local __pkgs_buildPkgArray=()
    local __vers_buildPkgArray=()

    # Get install packages
    if isInArray "YAML_ARRAY" "dependencies|${__key_buildPkgArray}|name:=" INDEX; then
        getYAMLValue "dependencies|${__key_buildPkgArray}|name" YAML_ARRAY __deps_name_buildPkgArray
        getYAMLValue "dependencies|${__key_buildPkgArray}|name|version" YAML_ARRAY __deps_vers_buildPkgArray
        __pkgs_buildPkgArray=("${__deps_name_buildPkgArray[@]}")
        __vers_buildPkgArray=("${__deps_vers_buildPkgArray[@]}")
    fi

    # Get distro packages if found
    if isInArray "YAML_ARRAY" "dependencies|${__key_buildPkgArray}|$RET_DISTRO|name:=" INDEX; then
        getYAMLValue "dependencies|${__key_buildPkgArray}|$RET_DISTRO|name" YAML_ARRAY __deps_name_buildPkgArray
        getYAMLValue "dependencies|${__key_buildPkgArray}|$RET_DISTRO|name|version" YAML_ARRAY __deps_vers_buildPkgArray

        __pkgs_buildPkgArray+=("${__deps_name_buildPkgArray[@]}")
        __vers_buildPkgArray+=("${__deps_vers_buildPkgArray[@]}")
    fi

    # Exclude rocm-dkms if in Container
    [ "${INCONTAINER}" = "true" ] && { removeFromArray "rocm-dkms" __pkgs_buildPkgArray __vers_buildPkgArray; }

    # Check packages array
    if [ "${#__pkgs_buildPkgArray[@]}" -eq 0 ]; then logPrint "ERR" "No value Found with this key!" "$__key_buildPkgArray" "${FAIL}"; exit; fi

    # Check if pkgs are installed
    for dep in "${__pkgs_buildPkgArray[@]}"; do
        (isPrgInstalled "${dep}") || { __isInstalled_buildPkgArray=1; break; }
    done

    # Return packages array
    eval $__res_pkg_buildPkgArray="(${__pkgs_buildPkgArray[@]})"
    eval $__res_ver_buildPkgArray="(${__vers_buildPkgArray[@]})"
    eval $__res_isInstalled_buildPkgArray="'$__isInstalled_buildPkgArray'"    
}

# ML benchmark
# Input $1: args (packages)
# Input $2: models
function benchmarkCmd {
    local -n __args_benchmarkCmd=$1
    local -n __models_benchmarkCmd=$2

    local __pkg_name_benchmarkCmd=()
    local __pkg_ver_benchmarkCmd=()
    local __isROCmInstalled_benchmarkCmd=0
    local __isTFInstalled_benchmarkCmd=0
    local __isPTInstalled_benchmarkCmd=0

    startLoadBar "Check ROCm Installation"; printf '\n'; echo
    # read yaml file
    yaml2arr "$REQ_FILE" YAML_ARRAY
    TOTALSTEPS=$((${#__models_benchmarkCmd[@]}+1));
    buildPkgArray "rocm" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isROCmInstalled_benchmarkCmd
    stopLoadBar

    [ "$__isROCmInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "ROCm is not installed!" "ROCm"

    # Build Package Array
    for ml in "${__args_benchmarkCmd[@]}"; do
        case "$ml" in
            tensorflow)
              logPrint "STEP" "Run ${ml} benchmark"
              buildPkgArray "$ml" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isTFInstalled_benchmarkCmd
              [ "$__isTFInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "Tensorflow is not installed!" "Tensorflow"
              runBenchmark "$ml" __models_benchmarkCmd
            ;;

            pytorch)
              buildPkgArray "$ml" __pkg_name_benchmarkCmd __pkg_ver_benchmarkCmd __isPTInstalled_benchmarkCmd
              [ "$__isPTInstalled_benchmarkCmd" -eq "1" ] && logPrint "ERR" "Pytorch is not installed!" "Pytorch"
            ;;
        esac
    done
}

# Run benchmark 
#Input $1 ML framework
#Input $2 Models array
function runBenchmark {
    local __ml_framework_runBenchmark=$1
    local -n __models_runBenchmark=$2
    local __cmd_ret_runBenchmark
    local __ret_value_runBenchmark=0
    local __cmd_array_runBenchmark=()

    case "$__ml_framework_runBenchmark" in
            tensorflow)
                if [ ! -d "$WORK_DIRECTRORY/tf" ]; then
                    local __cmd_python_runBenchmark
                    __cmd_array_runBenchmark=("git clone -b $TF_BNCH_VER $TF_BENCHMARKS_URL $WORK_DIRECTRORY/tf/"); runCmd __cmd_array_runBenchmark "WARN"
                fi

                # Run the training benchmark (e.g. ResNet-50)
                [ "$PYVER" = "py2" ] && __cmd_python_runBenchmark="python" || __cmd_python_runBenchmark="python3"
                [ "${#__models_runBenchmark[@]}" -eq 0 ] && __models_runBenchmark=("$TF_MODEL")
                for model in "${__models_runBenchmark[@]}"; do
                    TF_MODEL=$model
                    startLoadBar "Run ${TF_MODEL} benchmark"; printf '\n'
                    su -p $SUDO_USER -c "$__cmd_python_runBenchmark $WORK_DIRECTRORY/tf/scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py --model=$TF_MODEL --num_gpus=$NUM_GPUS --batch_size=$BATCH_SIZE --use_fp16=True"
                    __cmd_ret_runBenchmark="$?"
                    [ "$__cmd_ret_runBenchmark" -eq 0 ] && stopLoadBar "${TF_MODEL} benchmark Done" || { stopLoadBar "${TF_MODEL} benchmark Failed" "ERR"; __ret_value_runBenchmark=1; }
                done
                return $__ret_value_runBenchmark;
            ;;

            pytorch)
                echo "Pytorch benchmarking..."
            ;;
        esac
}


# Build ROCm Container
# Input $1: args (docker or singularity)
# Input $2: options
function buildContainer {
    local -n __args_buildContainer=$1
    local -n __options_buildContainer=$2

    local __pkg_name_buildContainer=()
    local __pkg_ver_buildContainer=()
    local __isInstalled_buildContainer=0
    local __isTFInstalled_buildContainer=0
    local __isPTInstalled_buildContainer=0
    local __pms_buildContainer="apt-get"

    yaml2arr "$REQ_FILE" YAML_ARRAY

    TOTALSTEPS=3;

    # Set default distro
    [ "${#__options_buildContainer[@]}" -eq 0 ] && __options_buildContainer[0]="${IMGNAME}"
    [[ ${__options_buildContainer[0]} =~ ^centos.* ]] && __pms_buildContainer="yum"

    installCmd __args_cmdEngine

    case "${__args_buildContainer[0]}" in
        "docker")
            logPrint "STEP" "Build Docker Image"
            editFile "${DOCKERFILE}" "FROM .*$" "FROM ${__options_buildContainer[0]}";
            editFile "${DOCKERFILE}" "ENV PMS=.*$" "ENV PMS=\\\"$__pms_buildContainer\\\"";
            docker build -t "ret_rocm" `dirname "${DOCKERFILE}"`
        ;;

        "singularity")
            logPrint "STEP" "Build Singularity Image"
            editFile "${RECIPEFILE}" "From: .* #DISTRO$" "From: ${__options_buildContainer[0]} #DISTRO";
            editFile "${RECIPEFILE}" "PMS=.*$" "PMS=\\\"$__pms_buildContainer\\\"";
            singularity build --sandbox --notest "ret_rocm.simg" "${RECIPEFILE}"
        ;;
    esac
}

# Install Singularity from Source
# This should be removed once singularity support DEP & RPM package installation
function installSingularity {
    local __cmd_ret_installSingularity
    local __retPath_installSingularity=$(pwd)
    local __cmd_array_installSingularity=()
    local __version_installSingularity=3.2.1
    local __url_installSingularity="https://github.com/sylabs/singularity/releases/download/v$__version_installSingularity/singularity-$__version_installSingularity.tar.gz"
    local __version_go=1.12
    local __url_go="https://dl.google.com/go/go${__version_go}.linux-amd64.tar.gz"

    # Confirmation message
    logPrint "STEP" "Install Singularity"
    confirmYn "Install Singularity? [Y/n] " || logPrint "ERR" "Install Singularity" "Singularity" "${FAIL}"

    # Download Go package
    downloadFile "$__url_go" "$TEMP_DIRECTRORY" "ERR" "Download Go"

    # Install the Go ###################################################################################
    startLoadBar "Install Go"

    __cmd_array_installSingularity=("tar -xzvf $TEMP_DIRECTRORY/go${__version_go}.linux-amd64.tar.gz -C /usr/local")
    runCmd __cmd_array_installSingularity "ERR"

    export GOPATH=${HOME}/go
    export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin

    stopLoadBar "Install Completed Successfully."
    ###################################################################################################

    # Download and extract the singularity package ####################################################
    downloadFile  "$__url_installSingularity" "$TEMP_DIRECTRORY" "ERR" "Download Singularity"

    # Install the singularity
    startLoadBar "Install Singularity"

    __cmd_array_installSingularity=("su -p $SUDO_USER -c \"tar -xzf $TEMP_DIRECTRORY/singularity-$__version_installSingularity.tar.gz -C $TEMP_DIRECTRORY\"")
    runCmd __cmd_array_installSingularity "ERR"

    cd "$TEMP_DIRECTRORY/singularity"

    __cmd_array_installSingularity=("su -p $SUDO_USER -c \"./mconfig\"")
    runCmd __cmd_array_installSingularity "ERR"

    __cmd_array_installSingularity=("su -p $SUDO_USER -c 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin; make -C ./builddir'")
    runCmd __cmd_array_installSingularity "ERR"


    __cmd_array_installSingularity=("make -C ./builddir install")
    runCmd __cmd_array_installSingularity "ERR"

    # Back to the RET folder
    cd "$__retPath_installSingularity"

    [ $? -ne 0 ] && stopLoadBar "There was a problem installing Singularity!" "ERR" "make install" \
                                      || stopLoadBar "Install Completed Successfully."
}
