#!/bin/bash

# Print script Usage 
function printUsage {
    echo -e ""
    echo -e "${BOLD}ROCmML Version ${VERSION}${END}"
    echo -e ""
    echo -e "${BOLD}Description:${END} ${FG_DARK_GRAY}${DESCRIPTION}${END}"
    echo -e ""
    echo -e "${BOLD}Usage: ${FG_GREEN}setup${END} [<option>] "
    echo -e "       ${BOLD}${FG_GREEN}setup${END} <command> "
    echo -e ""
    echo -e "${BOLD}command:${END}"
    echo -e "    [install] <package>      ${FG_LIGHT_BLUE}: Install ROCm or ML Framework TF/PT${END}"
    echo -e "    [remove]  <package>      ${FG_LIGHT_BLUE}: Remove ROCm or ML Framework TF/PT${END}"
    echo -e "    [update]  <package>      ${FG_LIGHT_BLUE}: Update ROCm or ML Framework TF/PT${END}"
    echo -e "    [validate]               ${FG_LIGHT_BLUE}: System validation${END}"
    echo -e "    [show]                   ${FG_LIGHT_BLUE}: Show system HW and SW details${END}"
    echo -e ""
    echo -e "${BOLD}packages:${END}"
    echo -e "    [rocm]                   ${FG_LIGHT_BLUE}: ROCm-dkms packages${END}"
    echo -e "    [tf|tensorflow]          ${FG_LIGHT_BLUE}: Tensorflow framework${END}"
    echo -e "    [pt|pytorch]             ${FG_LIGHT_BLUE}: Pytorch framework${END}"
    echo -e ""
    echo -e "${BOLD}Options:${END}"
    echo -e "    [-h|--help]              ${FG_LIGHT_BLUE}: Show this help message${END}"
    echo -e "    [-v|--version]           ${FG_LIGHT_BLUE}: Show version of this package${END}"
    echo -e "    [-V|--verbose]           ${FG_LIGHT_BLUE}: Be verbose${END}"
    echo -e "    [-b|--benchmark]         ${FG_LIGHT_BLUE}: Run benchmark${END}"
    echo -e "    [-d|--dryrun]            ${FG_LIGHT_BLUE}: Show what would be happened${END}"
    echo -e ""
    echo -e "${BOLD}Note:${END}"
    echo -e "  ${FG_DARK_GRAY}xxxxxxxxxxxx xxxxxxxxxxxxxxxxxx xx xxxxxxxxxxxxxxxx...${END}"
    echo -e
}

# Parse script args
function parseArgs {
    local __cmd=""
    local __pkgs=()

    until [ $# = 0 ]
    do
      case "$1" in
        -v | --version)
          printf "ROCmML version ${VERSION}\n"
          exit
         ;;

        -h | --help)
          printUsage
          exit
         ;;

        update)
          [[ $__cmd ]] && logPrint "ERR" "Only one command at time!"
          __cmd=$1
          shift
        ;;

        install)
          [[ $__cmd ]] && logPrint "ERR" "Only one command at time!"
          __cmd=$1
          shift
        ;;

        remove)
          [[ $__cmd ]] && logPrint "ERR" "Only one command at time!"
          __cmd=$1
          shift
        ;;

	rocm | tf | tensorflow | pt | pytorch)
          __pkgs+=("$1")
          shift
        ;;

        *)
          printUsage
          exit
        ;;
      esac
    done

    # Run command
    [[ $__cmd ]] && cmdEngine "${__cmd}" __pkgs || { printUsage; exit; }
}

# Run command
# Input $1: command
# Input $2: args (packages)
function cmdEngine {
    local __cmd_cmdEngine=$1
    local -n __args=$2

    if [ "${#__args[@]}" -eq 0 ]; then printUsage; exit; fi
    case "$__cmd_cmdEngine" in
        update)
          echo "update pkgs..."
        ;;

        install)
          installCmd __args
	  exit
        ;;

        remove)
          removeCmd __args
	  exit
        ;;

        *)
          printUsage
          exit
        ;;
      esac
}

# Install packages
# Input $1: args (packages)
function installCmd {
    local -n __args_installCmd=$1
    local __index=-1
    local __withRocm=1

    # Check system requirements
    checkSys
    
    # Get ROCm install packages
    getYAMLValue "dependencies|rocm|name" YAML_ARRAY ROCM_DEPS_ARRAY
    getYAMLValue "dependencies|rocm|name|version" YAML_ARRAY ROCM_VER_ARRAY


    # Check if rocm is required
    if ! (isInArray "__args_installCmd" "rocm" __index); then
	for pkg in "${__args_installCmd[@]}"; do
	    if [[ "$pkg" =~ ^(tf|pt|tensorflow|pytorch)$ ]]; then
                __args_installCmd=("${ROCM_DEPS_ARRAY[@]}" "${__args_installCmd[@]}"); 
                break; 
            fi 
	done
    else
        __args_installCmd=("${ROCM_DEPS_ARRAY[@]}" "${__args_installCmd[@]/rocm}"); 
    fi

    # Check if rocm-dkms is installed
    for dep in "${ROCM_DEPS_ARRAY[@]}"; do
        (isPrgInstalled "${dep}" ) || __withRocm=0
    done

    # Add the ROCm apt repository
    if [ "$__withRocm" -eq "0" ]; then
	wget -qO - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | apt-key add - >/dev/null 2>&1
        echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/debian/ xenial main' | tee /etc/apt/sources.list.d/rocm.list >/dev/null 2>&1
    fi

    # Check if packages are installed
    checkDeps __args_installCmd "" "Verifying ROCm Dependencies"

    # Run rocm post installation
    if [ "$__withRocm" -eq "0" ]; then
	rocmPostInstallation
    fi

    # Verify if ROCm installation was successful
    if (rocmVerification); then
	[ "$__withRocm" -eq "0" ] && __msg_rocm="The ROCm installation was successful!" || __msg_rocm="It seems as if ROCm has already been properly installed!"
        logPrint "DONE" "${__msg_rocm}" 
    else
	logPrint "ERR" "The ROCm installation was not completed successfully!"
    fi 
}

# Run rocm post installation
function rocmPostInstallation {
    # Add user to the video group
    usermod -a -G video $LOGNAME

    # Put the ROCm binaries in PATH
    echo 'export PATH=$PATH:/opt/rocm/bin:/opt/rocm/profiler/bin:/opt/rocm/opencl/bin/x86_64' | sudo tee -a /etc/profile.d/rocm.sh >/dev/null 2>&1

    # force reboot required
    isRebootRequired true
}

# Verify if ROCm installation was successful 
function rocmVerification {
    local __cmd_ret_rocmVerification
    local __cmd_rocmVerification="/opt/rocm/bin/rocminfo"
    local __gpu_lshw
    local __gpu_clinfo
    local __key
    local __s='[[:space:]]*'
    local __ret_rocmVerification=1

    logPrint "STEP" "Verifing ROCm installation"
    
    # Get GPU info with lshw
    __key="product:"
    __gpu_lshw=$(lshw -C display| grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')

    # Get GPU info with rocminfo
    $__cmd_rocmVerification >/dev/null 2>&1
    __cmd_ret_rocmVerification="$?"
    checkReturn "$__cmd_ret_rocmVerification" "$__cmd_rocmVerification" "ERR"

    # Get GPU info with clinfo
    __cmd_rocmVerification="/opt/rocm/opencl/bin/x86_64/clinfo" 
    __key="Board name:"
    __gpu_clinfo=$($__cmd_rocmVerification | grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')
    __cmd_ret_rocmVerification="$?"
    checkReturn "$__cmd_ret_rocmVerification" "$__cmd_rocmVerification" "ERR"

    if [ "$__gpu_lshw" = "$__gpu_clinfo" ]; then
        __ret_rocmVerification=0
    fi
    
    return $__ret_rocmVerification;
}

# Check if system reboot required
# Input $1: boolean value to force reboot required (Optional)
function isRebootRequired {
    if [ -f /var/run/reboot-required ] || [ "$1" = true ]; then
       logPrint "DONE" "Reboot Required! Please run this script after the reboot."
       exit
    fi
}

# Remove packages
# Input $1: args (packages)
function removeCmd {
    local -n __args_removeCmd=$1
    local __index=-1
    
    # read yaml file
    yaml2arr "$REQ_FILE" YAML_ARRAY

    # Build the packages array
    if (isInArray "__args_removeCmd" "rocm" __index); then
        # Get ROCm install packages
        getYAMLValue "dependencies|rocm|name" YAML_ARRAY ROCM_DEPS_ARRAY
        getYAMLValue "dependencies|rocm|name|version" YAML_ARRAY ROCM_VER_ARRAY

        __args_removeCmd=("${ROCM_DEPS_ARRAY[@]}" "${__args_installCmd[@]/rocm}"); 
    fi

    # Remove the packages
    TOTALSTEPS=1; logPrint "STEP" "Uninstalling Packages"
    removePkg __args_removeCmd

    # Verify if uninstall was successful
    for dep in "${__args_removeCmd[@]}"; do
        (isPrgInstalled "${dep}" ) && logPrint "ERR" "The uninstall process was not completed successfully!"
    done
}
