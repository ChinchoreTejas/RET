#!/usr/bin/env bash

# Add a Directory to the PATH
# Input $1: pkg name
# Input $2: dir path
function addPATH {
    local __name_addPATH="$1"
    local __path_addPATH="$2"
    local __cmd_array_addPATH=()

    __cmd_array_addPATH=("echo 'export PATH=$PATH:$__path_addPATH' | tee -a /etc/profile.d/$__name_addPATH.sh")
    runCmd __cmd_array_addPATH "ERR"

    __cmd_array_addPATH=("echo -e '# Env added by RET\nsource /etc/profile.d/$__name_addPATH.sh'>>~/.bashrc"); runCmd __cmd_array_addPATH "ERR"

    # Update the env on the current(child) shell
    __cmd_array_addPATH=("source /etc/profile.d/$__name_addPATH.sh"); runCmd __cmd_array_addPATH "ERR"
}

# Add the ROCm repository
function addROCmRepo {
    startLoadBar "Run ROCm Pre-Installation: Add the ROCm apt repository"; printf '\n'
    case "$RET_DISTRO" in
        Ubuntu)
            __cmd_array_addROCmRepo=("wget -qO - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | apt-key add -"); runCmd __cmd_array_addROCmRepo "ERR"
            __cmd_array_addROCmRepo=("echo -e 'deb [arch=amd64 trusted=yes] ${ROCM_DEB}' | tee ${Ubuntu_ROCM_REPO}"); runCmd __cmd_array_addROCmRepo "ERR"
        ;;

        CentOS | RedHat)
            __cmd_array_addROCmRepo=("echo -e '[ROCm]\nname=ROCm\nbaseurl=${ROCM_RPM}\nenabled=1\ngpgcheck=0' | tee ${CentOS_ROCM_REPO}"); 
            runCmd __cmd_array_addROCmRepo "ERR"
        ;;
    esac
    stopLoadBar
}

# Add the Docker repository
# Input $1 url
function addDockerRepo {
    local __url_addRepo="$1"
    local __cmd_array_addDockerRepo=()

    startLoadBar "Run Docker Pre-Installation: Add the Docker apt repository"; printf '\n'
    case "$RET_DISTRO" in
        Ubuntu)
            __cmd_array_addDockerRepo=("wget -qO - ${__url_addRepo}/ubuntu/gpg | apt-key add -"); 
            runCmd __cmd_array_addDockerRepo "ERR"

            __cmd_array_addDockerRepo=("add-apt-repository 'deb [arch=amd64 trusted=yes] ${__url_addRepo}/ubuntu $(lsb_release -cs) stable'"); 
            runCmd __cmd_array_addDockerRepo "ERR"
        ;;

        CentOS | RedHat)
            __cmd_array_addDockerRepo=("yum-config-manager --add-repo ${__url_addRepo}/centos/docker-ce.repo"); 
            runCmd __cmd_array_addDockerRepo "ERR"
        ;;
    esac
    stopLoadBar
}

# Verify if ROCm installation was successful
function rocmVerification {
    local __cmd_ret_rocmVerification
    local __cmd_rocmVerification="/opt/rocm/bin/rocminfo"
    local __cmd_array_rocmVerification=()
    local __gpu_lshw
    local __gpu_clinfo
    local __key
    local __s='[[:space:]]*'
    local __ret_rocmVerification=1

    logPrint "STEP" "Verifing ROCm installation"
    startLoadBar "Run ROCm Verification"; printf '\n'; 
    # Get GPU info with lshw
    __key="product:"
    __gpu_lshw=$(lshw -C display -quiet | grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')

    # Get GPU info with rocminfo
    __cmd_array_rocmVerification=("$__cmd_rocmVerification"); runCmd __cmd_array_rocmVerification "ERR" 0
    __cmd_ret_rocmVerification="$?"
    [ "$__cmd_ret_rocmVerification" -ne 0 ] && { isRebootRequired 1; stopLoadBar; return 7; }

    # Get GPU info with clinfo
    __cmd_rocmVerification="/opt/rocm/opencl/bin/x86_64/clinfo" 
    __key="Board name:"
    __gpu_clinfo=$($__cmd_rocmVerification 2>/dev/null| grep "${__key}" | sed -n 's|'$__s"${__key}"$__s'||p')
    __cmd_ret_rocmVerification="$?"
    [ "$__cmd_ret_rocmVerification" -ne 0 ] && { isRebootRequired 1; stopLoadBar; return 7; }

    #if [ "$__gpu_lshw" = "$__gpu_clinfo" ]; then
    #    __ret_rocmVerification=0
    #fi

    __ret_rocmVerification=0
    stopLoadBar

    return $__ret_rocmVerification;
}

# Verify if TF installation was successful 
function tfVerification {
    logPrint "STEP" "Verifing Tensorflow installation"
    if (isPrgInstalled "tensorflow-rocm:${PYPI}"); then
        if (confirmYn "Run Tensorflow benchmark? [Y/n] "); then
            startLoadBar "Run Tensorflow Verification"; printf '\n'
            local __models_runPostInstallation=("$TF_MODEL")
            runBenchmark "tensorflow" __models_runPostInstallation
            stopLoadBar
            return "$?"
        fi
        return 0;
    else
        return 1;
    fi
}

# Verify if NAMD installation was successful 
function namdVerification {
    logPrint "STEP" "Verifing NAMD installation"
    if (isPrgInstalled "namd"); then
        if (confirmYn "Run NAMD benchmark? [Y/n] "); then
            startLoadBar "Run NAMD Verification"; printf '\n'
            runBenchmark "namd" EMPTY_ARRAY
            stopLoadBar
            return "$?"
        fi
        return 0;
    else
        return 1;
    fi
}

# Verify if MPI installation was successful
function mpiVerification {
    if (confirmYn "Run OSU MPI benchmark? [Y/n] "); then
        startLoadBar "Run OSU MPI Verification"; printf '\n'
        runBenchmark "mpi" EMPTY_ARRAY
        stopLoadBar
        return "$?"
    fi
    return 0;
}

# Run TensorFlow benchmark
function tfBenchmark {
    local -n __models_tfBenchmark=$1
    local __cmd_array_tfBenchmark=()
    local __cmd_python_tfBenchmark
    local __cmd_ret_tfBenchmark
    local __ret_value_tfBenchmark=0

    if [ ! -d "$WORK_DIRECTORY/tf" ]; then
        __cmd_array_tfBenchmark=("su -p $SUDO_USER -c 'git clone -b $TF_BNCH_VER $TF_BENCHMARKS_URL $WORK_DIRECTORY/tf/'"); runCmd __cmd_array_tfBenchmark "WARN"
    fi

    # Run the training benchmark (e.g. ResNet-50)
    [ "$PYVER" = "py2" ] && __cmd_python_tfBenchmark="python" || __cmd_python_tfBenchmark="python3"
    [ "${#__models_tfBenchmark[@]}" -eq 0 ] && __models_tfBenchmark=("$TF_MODEL")
    for model in "${__models_tfBenchmark[@]}"; do
        TF_MODEL=$model
	startLoadBar "Run ${TF_MODEL} benchmark"; printf '\n'
	_dbg=DEBUG; DEBUG=true
	__cmd_array_tfBenchmark=("su -p $SUDO_USER -c '$__cmd_python_tfBenchmark $WORK_DIRECTORY/tf/train.py --num_gpus=$NUM_GPUS --batch_size=$BATCH_SIZE'"); runCmd __cmd_array_tfBenchmark "ERR"
	DEBUG=_dbg
	stopLoadBar
    done

    return $__ret_value_tfBenchmark;
}

# Run NAMD benchmark
function namdBenchmark {
    local __url_namdBenchmark="http://gitlab1.amd.com/nicurtis/NAMD_benchmarks.git"
    local __cmd_array_namdBenchmark=()
    local __cmd_python_namdBenchmark
    local __ret_value_namdBenchmark=0
    
    if [ ! -d "$WORK_DIRECTORY/namd" ]; then
        __cmd_array_namdBenchmark=("su -p $SUDO_USER -c 'git clone $__url_namdBenchmark $WORK_DIRECTORY/namd/'"); runCmd __cmd_array_namdBenchmark "WARN"
        __cmd_array_namdBenchmark=("cd $WORK_DIRECTORY/namd/ && dos2unix ns_per_day.py"); runCmd __cmd_array_namdBenchmark "ERR"
    fi

    # Run the benchmark
    startLoadBar "Run APOA1 STMV benchmark on 16 cores"; printf '\n'

    [ "$PYVER" = "py2" ] && __cmd_python_namdBenchmark="python" || __cmd_python_namdBenchmark="python3"
    __cmd_array_namdBenchmark=("cd $WORK_DIRECTORY/namd/ && export PATH=$PATH:$WORK_DIRECTORY/namd"); runCmd __cmd_array_namdBenchmark "ERR"

    __cmd_array_namdBenchmark=("$__cmd_python_namdBenchmark run_benchmarks.py -b apoa1 stmv -c 16-16 -d 0"); runCmd __cmd_array_namdBenchmark "ERR"
    runCmd __cmd_array_namdBenchmark "ERR" 0 && stopLoadBar "APOA1 STMV benchmark Done" || { stopLoadBar "APOA1 STMV benchmark Failed" "ERR"; __ret_value_namdBenchmark=1; }

    return $__ret_value_namdBenchmark;
}

# Run MPI benchmark
function mpiBenchmark {
    export RET_MPI=${WORK_DIRECTRORY}/RET_MPI
    #local __url_mpiBenchmark="https://github.com/ROCmSoftwarePlatform/hipOMB.git"
    local __url_mpiBenchmark="https://github.com/yuq/osu-micro-benchmarks-5.3.2.git"
    local __cmd_array_mpiBenchmark=()
    local __cmd_mpirun_mpiBenchmark="mpirun"
    local __cmd_ret_mpiBenchmark
    local __ret_value_mpiBenchmark=0

    startLoadBar "Setting up OSU MPI Benchmark"; printf '\n'

    __cmd_array_mpiBenchmark=("su -p $SUDO_USER -c 'rm -fr $RET_MPI/omb'")
    runCmd __cmd_array_mpiBenchmark "WARN"
    __cmd_array_mpiBenchmark=("su -p $SUDO_USER -c 'mkdir -p $RET_MPI/omb'")
    runCmd __cmd_array_mpiBenchmark "ERR"
    __cmd_array_mpiBenchmark=("su -p $SUDO_USER -c 'cd $RET_MPI && git clone $__url_mpiBenchmark omb'")
    runCmd __cmd_array_mpiBenchmark "WARN"
    __cmd_array_mpiBenchmark=("su -p $SUDO_USER -c \"source /etc/profile.d/mpi.sh && cd $RET_MPI/omb && autoreconf -ivf && ./configure --enable-rocm --with-rocm=/opt/rocm --prefix=$RET_MPI/omb CC=mpicc CXX=mpicxx LDFLAGS='-L$RET_MPI/ompi/lib -lmpi -L/opt/rocm/lib -lhip_hcc' CPPFLAGS='-std=c++11' && make -j install\"")
    runCmd __cmd_array_mpiBenchmark "ERR"

    stopLoadBar

    # Run the benchmark
    startLoadBar "Run OSU MPI Benchmark"; printf '\n'

    __cmd_array_mpiBenchmark=("su -p $SUDO_USER -c \"source /etc/profile.d/mpi.sh && $__cmd_mpirun_mpiBenchmark -np 2 --mca osc ucx --mca spml ucx -x LD_LIBRARY_PATH --allow-run-as-root -mca pml ucx -x UCX_TLS=sm,self,rocm_copy,rocm_ipc,rocm_gdr $RET_MPI/omb/mpi/pt2pt/osu_bw -d rocm D D 0 1 \"")
    runCmd __cmd_array_mpiBenchmark "ERR"
    #__cmd_array_mpiBenchmark=("source /etc/profile.d/mpi.sh && $__cmd_mpirun_mpiBenchmark -np 2 --mca osc ucx --mca spml ucx -x LD_LIBRARY_PATH --allow-run-as-root -mca pml ucx -x UCX_TLS=sm,self,rocm_copy,rocm_ipc,rocm_gdr $RET_MPI/omb/mpi/pt2pt/osu_lat -d rocm D D 0 1 ")
    #runCmd __cmd_array_mpiBenchmark "ERR"

    __cmd_ret_mpiBenchmark="$?"
    [ "$__cmd_ret_mpiBenchmark" -eq 0 ] && stopLoadBar "OSU MPI benchmark Done" || { stopLoadBar "OSU MPI benchmark Failed" "ERR"; __ret_value_mpiBenchmark=1; }

    return $__ret_value_mpiBenchmark
}

# Build Package Array by key and check if packages already installed
# Input  $1: Key
# Output $2: Package array and updated array
# Output $3: Package Version array
# Output $4: true if packages already installed
# Input  $5: Ignore Err msg if no pkg was found
function buildPkgArray {
    local __key_buildPkgArray=$1
    local __res_pkg_buildPkgArray=$2
    local __res_ver_buildPkgArray=$3
    local __res_isInstalled_buildPkgArray=$4
    local __ignore_check_buildPkgArray="${5:-1}"

    local __isInstalled_buildPkgArray=1
    local __deps_name_buildPkgArray=()
    local __deps_vers_buildPkgArray=()
    local __pkgs_buildPkgArray=()
    local __vers_buildPkgArray=()
    local __idx=0

    # Get install packages
    if isInArray "YAML_ARRAY" "dependencies|${__key_buildPkgArray}|name:=" INDEX; then
        getYAMLValue "dependencies|${__key_buildPkgArray}|name" YAML_ARRAY __deps_name_buildPkgArray
        getYAMLValue "dependencies|${__key_buildPkgArray}|name|version" YAML_ARRAY __deps_vers_buildPkgArray
        __pkgs_buildPkgArray=("${__deps_name_buildPkgArray[@]}")
        __vers_buildPkgArray=("${__deps_vers_buildPkgArray[@]}")
    fi

    # Get distro packages if found
    if isInArray "YAML_ARRAY" "dependencies|${__key_buildPkgArray}|$RET_DISTRO|name:=" INDEX; then
        getYAMLValue "dependencies|${__key_buildPkgArray}|$RET_DISTRO|name" YAML_ARRAY __deps_name_buildPkgArray
        getYAMLValue "dependencies|${__key_buildPkgArray}|$RET_DISTRO|name|version" YAML_ARRAY __deps_vers_buildPkgArray

        __pkgs_buildPkgArray+=("${__deps_name_buildPkgArray[@]}")
        __vers_buildPkgArray+=("${__deps_vers_buildPkgArray[@]}")
    fi

    # Exclude rocm-dkms if in Container
    [ "${INCONTAINER}" = "true" ] && { removeFromArray "rocm-dkms" __pkgs_buildPkgArray __vers_buildPkgArray; }

    # Check packages array
    if [ "${#__pkgs_buildPkgArray[@]}" -eq 0 ] && [ "${__ignore_check_buildPkgArray}" -eq 1 ]; then 
        logPrint "ERR" "No value Found with this key!" "$__key_buildPkgArray" "${FAIL}"; 
        exit; 
    fi

    # Check if pkgs are installed
    for dep in "${__pkgs_buildPkgArray[@]}"; do
        local __version="${__vers_buildPkgArray[$__idx]}"
        [ ! -z "$__version" ] && [ "$__version" != "latest" ] && dep+="=${__version}"
        (isPrgInstalled "${dep}") && __isInstalled_buildPkgArray=0 || { __isInstalled_buildPkgArray=1; break; }
        ((__idx++))
    done

    # Return packages array
    eval $__res_pkg_buildPkgArray="(${__pkgs_buildPkgArray[@]})"
    eval $__res_ver_buildPkgArray="(${__vers_buildPkgArray[@]})"
    eval $__res_isInstalled_buildPkgArray="'$__isInstalled_buildPkgArray'"    
}

# Build ROCm Container
# Input $1: args (docker or singularity)
# Input $2: options
function buildContainer {
    local -n __args_buildContainer=$1
    local -n __options_buildContainer=$2

    local __pkg_name_buildContainer=()
    local __pkg_ver_buildContainer=()
    local __isInstalled_buildContainer=0
    local __isTFInstalled_buildContainer=0
    local __isPTInstalled_buildContainer=0
    local __pms_buildContainer="apt-get"

    yaml2arr "$REQ_FILE" YAML_ARRAY

    TOTALSTEPS=3;

    # Set default distro
    [ "${#__options_buildContainer[@]}" -eq 0 ] && __options_buildContainer[0]="${IMGNAME}"
    [[ ${__options_buildContainer[0]} =~ ^centos.* ]] && __pms_buildContainer="yum"

    installCmd __args_buildContainer

    case "${__args_buildContainer[0]}" in
        "docker")
            logPrint "STEP" "Build Docker Image"
            editFile "${DOCKERFILE}" "FROM .*$" "FROM ${__options_buildContainer[0]}";
            editFile "${DOCKERFILE}" "ENV PMS=.*$" "ENV PMS=\\\"$__pms_buildContainer\\\"";
            docker build -t "ret_rocm" `dirname "${DOCKERFILE}"`
        ;;

        "singularity")
            logPrint "STEP" "Build Singularity Image"
            editFile "${RECIPEFILE}" "From: .* #DISTRO$" "From: ${__options_buildContainer[0]} #DISTRO";
            editFile "${RECIPEFILE}" "PMS=.*$" "PMS=\\\"$__pms_buildContainer\\\"";
            singularity build --sandbox --notest "ret_rocm.simg" "${RECIPEFILE}"
        ;;
    esac
}

# Install Singularity from Source
# This should be removed once singularity support DEP & RPM package installation
function installSingularity {
    local __cmd_ret_installSingularity
    local __retPath_installSingularity=$(pwd)
    local __cmd_array_installSingularity=()
    local __version_installSingularity=3.2.1
    local __url_installSingularity="https://github.com/sylabs/singularity/releases/download/v$__version_installSingularity/singularity-$__version_installSingularity.tar.gz"
    local __version_go=1.12
    local __url_go="https://dl.google.com/go/go${__version_go}.linux-amd64.tar.gz"

    # Confirmation message
    logPrint "STEP" "Build Singularity"

    # Download Go package
    startLoadBar "Download Go"
    __cmd_array_installSingularity=("su -p $SUDO_USER -c 'wget --progress=dot -P $TEMP_DIRECTORY $__url_go'")
    runCmd __cmd_array_installSingularity "ERR" "1" "Download Go" "0"
    stopLoadBar


    # Install the Go ###################################################################################
    startLoadBar "Install Go"

    __cmd_array_installSingularity=("tar -xzvf $TEMP_DIRECTORY/go${__version_go}.linux-amd64.tar.gz -C /usr/local")
    runCmd __cmd_array_installSingularity "ERR"

    export GOPATH=${HOME}/go
    export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin

    stopLoadBar "Install Completed Successfully."
    ###################################################################################################

    # Download and extract the singularity package ####################################################
    startLoadBar "Download Singularity"
    __cmd_array_installSingularity=("su -p $SUDO_USER -c 'wget --progress=dot -P $TEMP_DIRECTORY $__url_installSingularity'")
    runCmd __cmd_array_installSingularity "ERR" "1" "Download Singularity" "0"
    stopLoadBar

    # Install the singularity
    startLoadBar "Install Singularity"

    __cmd_array_installSingularity=("su -p $SUDO_USER -c \"tar -xzf $TEMP_DIRECTORY/singularity-$__version_installSingularity.tar.gz -C $TEMP_DIRECTORY\"")
    runCmd __cmd_array_installSingularity "ERR"

    cd "$TEMP_DIRECTORY/singularity"

    __cmd_array_installSingularity=("su -p $SUDO_USER -c \"./mconfig\"")
    runCmd __cmd_array_installSingularity "ERR"

    __cmd_array_installSingularity=("su -p $SUDO_USER -c 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin; make -C ./builddir'")
    runCmd __cmd_array_installSingularity "ERR"


    __cmd_array_installSingularity=("make -C ./builddir install")
    runCmd __cmd_array_installSingularity "ERR"

    # Back to the RET folder
    cd "$__retPath_installSingularity"

    [ $? -ne 0 ] && stopLoadBar "There was a problem installing Singularity!" "ERR" "make install" \
                                      || stopLoadBar "Install Completed Successfully."
}


# Install NAMD from Source
# This should be removed once NAMD support DEP & RPM package installation
function installNAMD {
    local __cmd_ret_installNAMD
    local __retPath_installNAMD=$(pwd)
    local __cmd_array_installNAMD=()
    local __url_NAMD_installNAMD="http://gitlab1.amd.com/nicurtis/NAMD.git"
    local __url_Charm_installNAMD="http://charm.cs.illinois.edu/distrib/charm-6.8.2.tar.gz"
    local __url_FFTW_installNAMD="http://www.ks.uiuc.edu/Research/namd/libraries/fftw-linux-x86_64.tar.gz"
    local __url_TCL_installNAMD="http://www.ks.uiuc.edu/Research/namd/libraries/tcl8.5.9-linux-x86_64.tar.gz"
    local __url_TCL_Thread_installNAMD="http://www.ks.uiuc.edu/Research/namd/libraries/tcl8.5.9-linux-x86_64-threaded.tar.gz"
    local __url_rocPRIM_installNAMD="https://github.com/ROCmSoftwarePlatform/rocPRIM.git"
    local __url_rocCUB_installNAMD="https://github.com/ROCmSoftwarePlatform/hipCUB.git"

    local __nProc_installNAMD=`grep -c ^processor /proc/cpuinfo`
    local __inst_root_installNAMD="$TEMP_DIRECTORY/NAMD"

    # Confirmation message
    logPrint "STEP" "Build NAMD"

    # Set the ROCm binaries in PATH
    __cmd_array_installNAMD=("source /etc/profile.d/rocm.sh"); runCmd __cmd_array_installNAMD "ERR"

    # Clone NAMD #######################################################################################################
    startLoadBar "Clone NAMD Repository"

    __cmd_array_installNAMD=("su -p $SUDO_USER -c 'git clone ${__url_NAMD_installNAMD} $__inst_root_installNAMD'")
    runCmd __cmd_array_installNAMD "ERR"

    stopLoadBar "Clone NAMD Completed Successfully."

    # Build the Charm++ ##############################################################################################
    __cmd_array_installNAMD=("./build charm++ multicore-linux-x86_64 --with-production -j$__nProc_installNAMD")
    buildFromSource "$__url_Charm_installNAMD" "$__inst_root_installNAMD" __cmd_array_installNAMD "charm-v6.8.2" "charm-6.8.2"

    # Build the FFTW and TCL libs ####################################################################################
    __cmd_array_installNAMD=()
    buildFromSource "$__url_FFTW_installNAMD" "$__inst_root_installNAMD" __cmd_array_installNAMD "linux-x86_64" "fftw"

    # Download TCL
    buildFromSource "$__url_TCL_installNAMD" "$__inst_root_installNAMD" __cmd_array_installNAMD "tcl8.5.9-linux-x86_64" "tcl"

    # Download TCL-threaded
    buildFromSource "$__url_TCL_Thread_installNAMD" "$__inst_root_installNAMD" __cmd_array_installNAMD "tcl8.5.9-linux-x86_64-threaded" "tcl-threaded"

    ##################################################################################################################

    # Build the rocPRIM ##############################################################################################
    __cmd_array_installNAMD=("mkdir build && cd build && export CXX=hcc && cmake -DBUILD_BENCHMARK=ON -DCMAKE_INSTALL_PREFIX=$__inst_root_installNAMD ../." "make install -j$__nProc_installNAMD" "cd $__inst_root_installNAMD")
    buildFromSource "$__url_rocPRIM_installNAMD" "$__inst_root_installNAMD/rocPRIM" __cmd_array_installNAMD "rocPRIM" "rocPRIM" "0"
    ##################################################################################################################

    # Build the rocCUB #################################################################################################
    __cmd_array_installNAMD=("mkdir build && cd build && export CXX=hcc && cmake -DCMAKE_INSTALL_PREFIX=$__inst_root_installNAMD .." "make install -j$__nProc_installNAMD")
    buildFromSource "$__url_rocCUB_installNAMD" "$__inst_root_installNAMD/hipCUB" __cmd_array_installNAMD "rocCUB" "rocCUB" "0"
    ##################################################################################################################

    # Build the NAMD ###############################################################################################
    startLoadBar "Build NAMD"

    __cmd_array_installNAMD=("cd $__inst_root_installNAMD && ./config Linux-x86_64-g++ --charm-arch multicore-linux-x86_64 --with-hip")
    runCmd __cmd_array_installNAMD "ERR"

    __cmd_array_installNAMD=("cd Linux-x86_64-g++ && make -j$__nProc_installNAMD && make release RELEASE_DIR_NAME=RET_NAMD")
    runCmd __cmd_array_installNAMD "ERR"

    # Copy the release folder into local distination and add it to the PATH
    __cmd_array_installNAMD=("cp RET_NAMD/namd2 RET_NAMD/namd && cp -a RET_NAMD $__retPath_installNAMD/..")
    runCmd __cmd_array_installNAMD "ERR"

    stopLoadBar "Build NAMD Completed Successfully."
    ##################################################################################################################

    # Back to the RET folder
    cd "$__retPath_installNAMD"

    [ $? -ne 0 ] && stopLoadBar "There was a problem building NAMD!" "ERR" "make" \
                                       || stopLoadBar "Install Completed Successfully."
}

# Install MPI (Open MPI, UCX, GDRcopy) from source
# This should be removed once ROCm-enable DEP & RPM packages are available in the future
function installMPI {
    local __url_OpenMPI_installMPI="https://github.com/open-mpi/ompi.git -b v4.0.x"
    local __url_GDRCOPY_installMPI="https://github.com/NVIDIA/gdrcopy.git -b v1.3"
    local __url_UCX_installMPI="https://github.com/openucx/ucx.git -b v1.6.x"

    local __inst_root_installMPI="${PWD}/RET_MPI"
    local __inst_root_installOpenMPI="$__inst_root_installMPI/ompi"
    local __inst_root_installGDRCOPY="$__inst_root_installMPI/gdrcopy"
    local __inst_root_installGDRCOPY_LIB="$__inst_root_installGDRCOPY/lib64"
    local __inst_root_installGDRCOPY_INCLUDE="$__inst_root_installGDRCOPY/include"
    local __inst_root_installUCX="$__inst_root_installMPI/ucx"

    if [ ! -d "$__inst_root_installMPI" ]; then
        __cmd_array_installMPI=("su -p $SUDO_USER -c 'mkdir -p $__inst_root_installMPI'")
        runCmd __cmd_array_installMPI "ERR"
    fi

    # Build GDRCPY ##############################################################################################
    startLoadBar "Build GDRcopy"

    if [ -d $__inst_root_installGDRCOPY ]; then
        __cmd_array_installMPI=("rm -fr $__inst_root_installGDRCOPY")
        runCmd __cmd_array_installMPI "ERR"
    fi
    __cmd_array_installMPI=("cd $__inst_root_installGDRCOPY && mkdir -p $__inst_root_installGDRCOPY_LIB $__inst_root_installGDRCOPY_INCLUDE" "make PREFIX=$__inst_root_installGDRCOPY lib install && cd $__inst_root_installMPI")
    buildFromSource "$__url_GDRCOPY_installMPI" "$__inst_root_installGDRCOPY" __cmd_array_installMPI "gdrcopy" "gdrcopy" "0"

    stopLoadBar "Build GDRcopy completed successfully."

    # Build UCX ##############################################################################################
    startLoadBar "Build UCX"

    if [ -d $__inst_root_installUCX ]; then
        __cmd_array_installMPI=("rm -fr $__inst_root_installUCX")
        runCmd __cmd_array_installMPI "ERR"
    fi

    __cmd_array_installMPI=("cd $__inst_root_installUCX && ./autogen.sh && mkdir build && cd build && ../contrib/configure-release --prefix=$__inst_root_installUCX --with-rocm=/opt/rocm --with-gdrcopy=$__inst_root_installGDRCOPY --enable-gtest --enable-examples" "make -j install && cd $__inst_root_installMPI")
    buildFromSource "$__url_UCX_installMPI" "$__inst_root_installUCX" __cmd_array_installMPI "ucx" "ucx" "0"

    stopLoadBar "Build UCX completed successfully."

    # Build OMPI ##############################################################################################
    startLoadBar "Build Open MPI"

    if [ -d $__inst_root_installOpenMPI ]; then
        __cmd_array_installMPI=("rm -fr $__inst_root_installOpenMPI")
        runCmd __cmd_array_installMPI "ERR"
    fi
    __cmd_array_installMPI=("cd $__inst_root_installOpenMPI && ./autogen.pl && mkdir build && cd build && ../configure --prefix=$__inst_root_installOpenMPI --with-ucx=$__inst_root_installUCX --enable-mca-no-build=btl-uct" "make -j install && cd $__inst_root_installMPI")
    buildFromSource "$__url_OpenMPI_installMPI" "$__inst_root_installOpenMPI" __cmd_array_installMPI "ompi" "ompi" "0"

    stopLoadBar "Build Open MPI completed successfully."

    # Back to the RET folder
    cd "$__retPath_installMPI"

    [ $? -ne 0 ] && stopLoadBar "There was a problem building MPI!" "ERR" "make" \
                                       || stopLoadBar "Install Completed Successfully."
}

# Build Package with cmake
# Input $1: source code url
# Input $2: where to download and build
# Input $3: build commands array
# Input $4: src directory name
# Input $5: dist directory name [default=$4]
# Input $6: if git(0) or tar(1) file [default=1]
function buildFromSource {
    local __src_url_buildFromSource=$1
    local __dist_buildFromSource=$2
    local -n __build_cmd_buildFromSource=$3

    local __src_dir_name_buildFromSource="$4"
    local __dist_dir_name_buildFromSource="${5:-$__src_dir_name_buildFromSource}"
    local __fromGit_buildFromSource="${6:-1}"

    local __cmd_array_buildFromSource=()
    local __pkg_name_buildFromSource="${__src_url_buildFromSource##*/}"


    # Download or clone source code
    if [ "$__fromGit_buildFromSource" -ne 0 ]; then
        
        # Download source file
        startLoadBar "Download $__dist_dir_name_buildFromSource"
        __cmd_array_buildFromSource=("su -p $SUDO_USER -c 'wget --progress=dot -P $__dist_buildFromSource $__src_url_buildFromSource'")
        runCmd __cmd_array_buildFromSource "ERR" "1" "Download $__dist_dir_name_buildFromSource" "0"
        stopLoadBar

        startLoadBar "Extract $__dist_dir_name_buildFromSource"
        __cmd_array_buildFromSource=("tar -xzvf $__dist_buildFromSource/$__pkg_name_buildFromSource -C $__dist_buildFromSource && mv $__dist_buildFromSource/$__src_dir_name_buildFromSource $__dist_buildFromSource/$__dist_dir_name_buildFromSource && cd $__dist_buildFromSource/$__dist_dir_name_buildFromSource")
        runCmd __cmd_array_buildFromSource "ERR"
    else
        startLoadBar "Clone $__dist_dir_name_buildFromSource"
        __cmd_array_buildFromSource=("su -p $SUDO_USER -c 'git clone ${__src_url_buildFromSource} $__dist_buildFromSource' && cd $__dist_buildFromSource")
        runCmd __cmd_array_buildFromSource "ERR" 
    fi
    stopLoadBar
    
    # Build source code
    startLoadBar "Build/Install $__dist_dir_name_buildFromSource"
    for cmd in "${__build_cmd_buildFromSource[@]}"; do
        __cmd_array_buildFromSource=("$cmd")
        runCmd __cmd_array_buildFromSource "ERR" "1" "Build/Install $__dist_dir_name_buildFromSource" "0"
    done
    stopLoadBar
}
