#!/usr/bin/env bash

# Print the message/inser to the log file 
# Input $1: type [STEP (for one of the main steps), DET (for detailed info), ERR (for error), NOTE ( for note), DONE (success confirmation)]
# Input $2: title
# Input $3: value (only for type [DET, ERR])
# Input $4: State [SUCC, FAIL]
function logPrint {
    # Init input variables 
    local __type=$1
    local __title=$2
    local __value=$3

    # Step heading
    if [ "${__type}" = "STEP" ]; then
	((STEP_COUNT++)); local __terminal_width=$(tput cols); tput clear; printf '=%.0s' $(seq 1 ${__terminal_width}); printf '\n'
	echo -e "${STEP}[STEP:$STEP_COUNT] ${__title}...${END}";
    # Sub-Step heading
    elif [ "${__type}" = "SUBSTEP" ]; then
        echo -ne "${SUBSTEP}${__title}...${END}\r" 
    # Detailed info
    elif [ "${__type}" = "DET" ]; then
        local __state=$4
        local __msg=$(printf '\t%-10s' "${__title}")
        printf '%-25s' "$__msg .........."
        echo -e "${__state}${__value}${END}";
    # Success confirmation
    elif [ "${__type}" = "DONE" ]; then
        echo
	echo -e "${DONE}${__title}${END}";
    # Error and exit
    elif [ "${__type}" = "ERR" ]; then
        echo
	echo -e "${ERR}${__title}...[${__value}]${END}";
        exitAll 2
    # Warning
    elif [ "${__type}" = "WARN" ]; then
        echo
	echo -e "${WARN}${__title}...[${__value}]${END}";
    # Info
    elif [ "${__type}" = "NOTE" ]; then
        echo
	echo -e "${NOTE}${__title}${END}";
    else
        echo
	echo -e "${NOTE}${__title}${END}";
    fi
}


# Check OS, Distro and kernel
# Input $1: array with the Distro
function checkOs {
    local __distro_checkOS
    local __release_checkOS
    local __kernel_checkOS
    local __arch_checkOS

    local __state="${SUCC}"
    local __failed

    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        getOSInfo __distro_checkOS __release_checkOS __kernel_checkOS __arch_checkOS

	# Check distro name
        (isSupported "os_support|os" "${__distro_checkOS}") && __state="${SUCC}" || { __state="${FAIL}"; __failed="NSDISTRO"; }
        logPrint "DET" "OS" "${__distro_checkOS}" "${__state}"

	# Check Release version
        (isSupported "os_support|${__distro_checkOS}|release" "${__release_checkOS}") && __state="${SUCC}" || { __state="${FAIL}"; [ -z "$__failed" ] && __failed="NSREL"; }
	logPrint "DET" "RELEASE" "${__release_checkOS}" "${__state}"

	# Check just Kernel and major revision
        local __kernel_version="${__kernel_checkOS%%.*}"
        local __major_revision="${__kernel_checkOS#*.}"
        __major_revision="${__major_revision%%.*}"

        __state="${SUCC}"
        (isSupported "os_support|${__distro_checkOS}|kernel|${__release_checkOS}|version" "${__kernel_version}.${__major_revision}") && __state="${SUCC}" || { __state="${FAIL}"; [ -z "$__failed" ] && __failed="NSKERNEL"; }
        logPrint "DET" "KERNEL" "${__kernel_checkOS}" "${__state}"

	# Just print the current Arch
	logPrint "DET" "ARCH" "${__arch_checkOS}" "${SUCC}"
    else
        logPrint "ERR" "OS Not Supported!" "$OSTYPE" "${FAIL}"
    fi

    case "$__failed" in
        "NSDISTRO") logPrint "ERR" "OS distro Not Supported!" "${__distro_checkOS}" "${FAIL}" ;;
        "NSREL")    logPrint "ERR" "OS release Not Supported!" "${__release_checkOS}" "${FAIL}" ;;
        "NSKERNEL") logPrint "WARN" "OS kernel Not Supported!" "${__kernel_checkOS}" "${FAIL}"

        	    # Get the recommended kernel and Update kernel
    		    local __default_kernel=()
                    getYAMLValue "os_support|${__distro_checkOS}|kernel|${__release_checkOS}|default" YAML_ARRAY __default_kernel
                    updateKernel "${__distro_checkOS}" "${__kernel_checkOS}" "${__arch_checkOS}" "${__default_kernel[0]}" ;;
        *) # Do nothing ;;
    esac    
}

# Convert string from ">=4.13 <=4.18" to array like [4.13, 4.14, 4.15, 4.16, 4.17, 4.18]
# Input $1: string to convert
function str2ArrayRange {
    local __str=$1
    local __s='[[:space:]]*' 
    local __digit='[0-9.]*'
    local __conversation_type="SEQ" # Params are SEQ (for sequence) and SPT (for split)
 
    [[ "${__str}" == *'>='*'<='* ]] && __conversation_type="SEQ" || __conversation_type="SPT"

    if [[ "$__conversation_type" == "SEQ" ]]; then
        echo $__str | sed -n 's|^.*>='$__s'\('$__digit'\)[[:space:]]<='$__s'\('$__digit'\).*|\1-\2|p' |
                      awk 'BEGIN{FS="-";}{for (i=$1; i<$2; i+=0.01) { print(i); }}'
    elif [[ "$__conversation_type" == "SPT" ]]; then
        echo $__str | sed 's| ||g' | awk '{ split($0,a,"|"); for (item in a){ print(a[item]);} }' 
    fi
}

# Check if value exists in the supported array items
# Input $1: Key to look for in array
# Input $2: Value to check if it supported
function isSupported {
    local __key=$1
    local __val=$2
    local __ret_array=()
    local __index=-1

    getYAMLValue "${__key}" YAML_ARRAY __ret_array

    # Check if __ret_array needs to be interept (If sym. like >=, <=, <, etc.)
    if [[ "${__ret_array[0]}" == *'>='*'<='* || "${__ret_array[0]}" == *'|'* ]]; then
        __ret_array=$(str2ArrayRange "${__ret_array[0]}") 
        IFS=$'\r\n' eval  __ret_array='(${__ret_array})'
    fi

    (isInArray "__ret_array" "${__val}" __index) && return 0;
    return 1;
}

# Check if the required dependencies are installed
# Input $1: array with the name of deps
# Input $2: array with the version of deps
# Input $3: title (Optional)
function checkDeps {
    local -n __name_array=$1
    local -n __ver_array=${2:-EMPTY_ARRAY}
    local __idx=0
    local __title_checkDeps=${3:-"Verifying Dependencies"}
    local __dep_toInstall
    local __DEPS_TOINSTALL=() # Array of deps


    logPrint "STEP" "${__title_checkDeps}"
    for dep in "${__name_array[@]}"; do
	if isPrgInstalled "${dep}"; then
            logPrint "DET" "${dep}" "Found" "${SUCC}"
        else
	    __dep_toInstall="${dep}"

            # Get Version
	    local __version="${__ver_array[$__idx]}"
            [ ! -z "$__version" ] && [ "$__version" != "latest" ] && __dep_toInstall="${dep}=${__version}"

	    __DEPS_TOINSTALL+=("${__dep_toInstall}")
            logPrint "DET" "${dep}" "Not Found!" "${FAIL}"
        fi
	((__idx++))
    done

    # Install deps if needed
    if [ "${#__DEPS_TOINSTALL[@]}" -ne 0 ]; then
        logPrint "NOTE" "The above not installed packages are required to complete this setup."
        if (confirmYn "Install dependencies? [Y/n] "); then
	    startLoadBar "Install dependencies"
            installPkg __DEPS_TOINSTALL
            stopLoadBar "Installation Completed Successfully."
        else
	    logPrint "ERR" "Packages are required to complete this setup!" "$(printf "%s " "${__DEPS_TOINSTALL[@]}")"
	fi
    fi
}


# Read and parse yaml file 
# Input $1: yaml file name
# Note: this parser support only the syntax needed. Flow Styles are not supported
function parse_yaml {
    local __file_name=$1
    local __s='[[:space:]]*' 
    local __w='[a-zA-Z0-9_.]*' 
    local __fs=${__fs:-$(echo @|tr @ '\034')}
    local __q=''\"\'''
    local __sep=\"\|\"
    local __br_eq=\":=\"

    local __rm_bl='/^$/d' # rm black lines
    local __rm_sp='s|'$__s'$||g;' # rm spaces at the end of the lines
    local __rm_doc_begin='s|^'$__s'\(---\)'$__s'||g' # rm doc begin
    local __rm_doc_end='s|^'$__s'\(\.\.\.\)'$__s'||g' # rm doc end


    local __rm_cmt='s|^'$__s'#.*||g' # rm line begin with #
    local __rm_il_cmt='/#['$__q']/!s|[[:space:]]#.*||g' # rm inline comment
    local __get_item_list='s|^\('$__s'\)-'$__s'\('$__w'\)'$__s':'$__s'\(.*\)'$__s'$|\1'$__fs'\2'$__fs'\3|g' # - key: value
    local __get_map_list='s|^\('$__s'\)\('$__w'\)'$__s'[:-]'$__s'\(.*\)'$__s'$|\1'$__fs'\2'$__fs'\3|g' # map detection key: value, key: 'value', key: "value"

    cat $__file_name | \
        sed -e $__rm_sp -e $__rm_doc_begin -e $__rm_doc_end -e $__rm_cmt -e $__rm_il_cmt -e $__rm_bl -e $__get_item_list -e $__get_map_list | \
	
    awk -F$__fs 'BEGIN{
        last_indent = 0; br_count = 0;
    }
    {
        #The suggested syntax for YAML files is to use 2 spaces for indentation
        indent = length($1)/2;
	

        # extract the dictionarie key 
	if(length($2)!= 0){node[indent] = $2}

	# extract the value
	value= (length($3)!= 0)? $3: "null";

	# reinit child elements
	if(indent < last_indent){for(i=indent+1; i <= last_indent; i++){delete node[i]; idx[i]=0;}}
	last_indent = indent;

	br=""; for (i=0; i<indent; i++) {br=(br)(node[i])('$__sep')}
        branch=br node[indent];
	

	# remove the last char
        if(length(node[indent]) == 0){branch = substr(branch, 1, length(branch)-1)}

	# Check if branch already exists
	# update if true; else insert new value
	isBrExists = 0;
	for(i in br_array){
            split(br_array[i], tmp_br, '$__br_eq');
		
            if(branch == tmp_br[1]){
	        br_array[i] = branch '$__br_eq' tmp_br[2]";"value; 
		isBrExists = 1;
	    }
	}

	if(isBrExists == 0){
	    # put valid branch in array
	    if(value != "null"){
	        br_array[br_count] = branch '$__br_eq' value;
		br_count++;
	    }
	}
    }END{
	for(i=0; i<=br_count; i++){print(br_array[i]);}
    }'
}


# Parser yaml file into array
# Input $1: yaml file name
# Output $2: Return Array
function yaml2arr {
    local __yaml_file=$1
    local __res_array=$2

    # Make Sanity Check
    fileSanityCheck $__yaml_file

    local __array=$(parse_yaml $__yaml_file)
    IFS=$'\r\n' eval  $__res_array='(${__array})'
    #echo "${__res_array[3]}"
}

# Get value yaml value by key
# Input $1: Key 
# Input $2: YAML_Array Ref
# Input $3: Output Array
function getYAMLValue {
    local __key=$1
    local -n __ref_yaml_array=$2
    local __ref_yaml_val_array=$3
    
    if isInArray "__ref_yaml_array" "${__key}:=" INDEX; then
        local __value="${__ref_yaml_array[$INDEX]#*:=}" # get the value part
        IFS=$';' eval  $__ref_yaml_val_array='(${__value})'
        return 0;
    else
        logPrint "ERR" "No value Found with this key!" "$__key" "${FAIL}"

	return 1;
    fi
}

# Check if array contains value
# Input $1: Array Ref
# Input $2: Vaue/Key
# Output $3: item index
function isInArray {
    local -n __ref_in_array=$1
    local __key=$2
    local __idx=$3
    local __index=0

    for item in "${__ref_in_array[@]}"; do
        if [[ "${item}" == ${__key}* ]] ; then
	    eval $__idx="'$__index'"
	    return 0;
        fi
        ((__index++))
    done
    return 1;
}

# Check if program is installed
# Input $1: program name
# Return 0,1
function isPrgInstalled {
	# Init to found eq true
  	# 0 means no failure and non-0 means failure.
	local __found=0

	# update value if not found
  	type $1 >/dev/null 2>&1 || { __found=1; }

	return $__found;
}

# Get OS and Version
# Return OS, Version, Kernel and the Architecture
function getOSInfo {
	# Init output variables 
	local __res_os=$1
	local __res_ver=$2
	local __res_kernel=$3
	local __res_arch=$4

	local __OS
	local __VER
	local __ARCH
	local __KERNEL=$(uname -r)

	if [ -f /etc/os-release ]; then
		. /etc/os-release
		__OS=$NAME
		__VER=$VERSION_ID
	elif [ -f /etc/lsb-release ]; then
		. /etc/lsb-release
	        __OS=$DISTRIB_ID
		__VER=$DISTRIB_RELEASE
	else
		__OS=$(uname -s)
		__VER=$(uname -r)
	fi

	# Get OS Architecture
	if [ $(uname -m) == 'x86_64' ]; then
		__ARCH="amd64"
	else
		__ARCH="i386"
	fi

	eval $__res_os="'$__OS'"
	eval $__res_ver="'$__VER'"
	eval $__res_kernel="'$__KERNEL'"
	eval $__res_arch="'$__ARCH'"
}


# Check if file exists and not empty
# Input $1: file name
# Return Error and exit the exec
function fileSanityCheck {
    # Check if file exists
    if [ ! -f $1 ]; then
        logPrint "ERR" "File Not Found!" "$1"
    fi

    if [ ! -s $1 ]; then
        logPrint "ERR" "File is empty!" "$1"
    fi
}

# Get user confirmation of Y/n 
# Input $1: message (optional)
# Return 0,1
function confirmYn {
    read -r -p "${1:-Do you want to continue? [Y/n] }" REPLY
    if [[ ${REPLY} =~ ^[Yy] ]] || [[ -z "${REPLY}" ]]; then
        return 0;
    fi
    return 1;
}

# Check if user has sudo or root privileges
# Return 0,1
function isSudo {
    if [ "$EUID" -ne 0 ]; then
        return 1;
    fi
    return 0;
}

# Install package
# Input $1: package array
# Return 0,1
function installPkg {
    local -n __packages=$1
    local __cmd_ret_installPkg

    # fix broken dependencies in place
    apt-get install -fqq >/dev/null 2>&1
    __cmd_ret_installPkg="$?"
    checkReturn "$__cmd_ret_installPkg" "apt-get install -f" "WARN"

    # Updates the package lists
    apt-get update >/dev/null 2>&1

    for dep in "${__packages[@]}"; do
        apt-get -qq -y install "${dep}" >/dev/null 2>&1
        __cmd_ret_installPkg="$?"
        checkReturn "$__cmd_ret_installPkg" "apt-get install ${dep}" "ERR"
    done
}


# Check if command return error
# Input $1: Return State
# Input $2: The cmd causing the error
# Input $3: Error type [ERR (stop the execution), WARN (only show the warning an keep running)]
# Input $4: The output message 
function checkReturn {
    local __state=$1
    local __cmd=$2
    local __err_type_checkReturn="${3:-ERR}"
    local __err_msg="${4:-An error occurred while executing the command!}"

    if [ "$__state" -ne 0 ]; then
        logPrint "$__err_type_checkReturn" "$__err_msg" "$__cmd"
    fi
}

# Install Necessary Packages
function preStart {
    local __necessary_packages=("git" "curl" "wget" "lynx" "sed" "gawk")
    checkDeps __necessary_packages "" "Run Pre-installation Requirements"
}

# Load bar while running a command
# Input $1: Message text
# Input $2: Message type
function loadBar {
    local __msg_loadbar="$1"
    local __msg_type_loadbar="${2:-SUBSTEP}"
    local __pos_loadbar="${3:-0}"
    tput civis

    while true
    do 
        for (( i=${__pos_loadbar}; i<${#LOADBAR}; i++ )); do
	   logPrint "${__msg_type_loadbar}" "${CLEAR}${LOADBAR:$i:1} ${__msg_loadbar}"
	   sleep 0.1; 
        done
    done
}

# Start load bar
# Input $1: Message text
function startLoadBar {

    stopLoadBar >/dev/null 2>&1 # Stop previous process if exists
    loadBar "$1" "SUBSTEP" "$2" &
    LOADBARPID=$!
}

# Stop loader
# Input $1: Message text
# Input $2: Stop state
# Input $3: Message Value (Optional)
function stopLoadBar {
    local __msg_stopLoadBar="$1"
    local __msg_type_stopLoadBar="${2:-DONE}"
    local __msg_value_stopLoadBar="$3"
    tput cnorm

    kill -9 "${LOADBARPID}" >/dev/null 2>&1 # send SIGKILL 
    wait "${LOADBARPID}" >/dev/null 2>&1
    [ -z "${__msg_stopLoadBar}" ] || logPrint "${__msg_type_stopLoadBar}" "${__msg_stopLoadBar}" "${__msg_value_stopLoadBar}"
}

# Stop all process befor exit this program
# Input $1: exit code
function exitAll {
   stopLoadBar; echo
   exit $1
}

# Download file from URL
# Input $1: URL
# Input $2: Output Path
# Input $3: Error type [ERR (stop the execution), WARN (only show the warning an keep running)]
# Input $4: Message text
function downloadFile {
    local __err_type_downloadFile=$3
    local __cmd_ret_downloadFile
    local __msg_txt_downloadFile=${4:-"Download file"}

    # Read terminal output and pass it to loadBar
    function updatePercentage {
        local __download_per
        local __LoadBar_Pos=0
	local __succ_updatePercentage=1
        local __previous_value_updatePercentage="${__download_per}"

        while read __download_per
  	do
            if [ "${__download_per}" != "${__previous_value_updatePercentage}" ]; then
	        ((__LoadBar_Pos++)); __LoadBar_Pos=$((__LoadBar_Pos % ${#LOADBAR}))
                startLoadBar "${__msg_txt_downloadFile}: ${__download_per}" ${__LoadBar_Pos}
	        __previous_value_updatePercentage="${__download_per}"
		__succ_updatePercentage=0
	    fi
        done
	[ $__succ_updatePercentage -eq 0 ] && stopLoadBar "Download Finished!" || stopLoadBar
	return $__succ_updatePercentage;
    }

    # Download file and get the current download state
    wget --progress=dot -P "$2" "$1" 2>&1 | grep --line-buffered "%" | sed -u -e 's|.* \([0-9]\+[0-9]*\%\).*|\1|g' | updatePercentage

    # Check the return state 
    __cmd_ret_downloadFile="$?"
    checkReturn "$__cmd_ret_downloadFile" "wget -O $2 $1" "${__err_type_downloadFile}" "There was a problem downloading this package!"
}

function printUsage {
   echo ""
   echo "ROCmML Version (v${MY_VERSION})"
   echo ""
   echo "Description: ${MY_DESCRIPTION} xxxxxxxxxxxx xxxxxxxxxxxxxxxxxx xx xxxxxxxxxxxxxxxx"
   echo ""
   echo "Usage: setup [<option>] "
   echo "             <command> "
   echo ""
   echo "command:"
   echo "    [install] <ML Framework> : Install ML Framework TF/PT"
   echo "    [remove]  <ML Framework> : Remove ML Framework TF/PT"
   echo "    [update]  <ML Framework> : Update ML Framework TF/PT"
   echo ""
   echo "Options:"
   echo "    [-h|--help]              : Show this help message"
   echo "    [-v|--version]           : Show version of this package"
   echo "    [-V|--verbose]           : Be verbose"
   echo "    [-b|--benchmark]         : Run benchmark"
   echo "    [-d|--dryrun]            : Run dryrun"
   echo ""
   echo "Note:"
   echo "  xxxxxxxxxxxx xxxxxxxxxxxxxxxxxx xx xxxxxxxxxxxxxxxx..."
   echo
}

function parseArgs {
    until [ $# = 0 ]
    do
      case "$1" in
        --version)
          printf "VERSION\n"
          exit
         ;;

        update)
          [[ $command ]] && echo "error only one command"
          command=$1
          shift
        ;;

        install)
          [[ $command ]] && echo "error only one command"
          command=$1
          shift
        ;;

        *)
          printUsage
          exit
        ;;
      esac
    done
}
