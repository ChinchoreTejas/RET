#!/usr/bin/env bash

# Get kernel from the Linux Kernel mainline
# Input $1: kernel URL
# Input $2: kernel version
# Input $3: System Arch
# Input $4: kernel type
# Input $5: Output Path
function getKernel {
    # Get the last kernel version
    local __valid_chars='[a-zA-Z0-9.-]*'
    local __cmd_ret_getkernel=($(curl -sL "$1?C=M;O=D" | grep v"$2" | sed -n 's/.*href="\('$__valid_chars'\).*/\1/p' | awk '{print($0)}'))

    # Get download URLs
    local __kernel_version="${__cmd_ret_getkernel[0]}"

    __cmd_ret_getkernel="$(lynx -dump -listonly -nonumbers "$1${__kernel_version}" | grep -v ""BUILD.LOG"" | sort | uniq)"
    [[ -z "${__cmd_ret_getkernel}" ]] && logPrint "ERR" "No kernel found with this version!" "${__kernel_version}" "${FAIL}"


echo "download..."

    # Download the corresponding packages
    local __kernel_headers_all="$(echo "$__cmd_ret_getkernel" | grep ""headers"" | grep ""all"")"
    [[ -z "${__kernel_headers_all}" ]] && __kernel_headers_all="kernel_headers_all"
    downloadFile "$__kernel_headers_all" "$5" "ERR" 

    local __kernel_headers="$(echo "$__cmd_ret_getkernel" | grep "$3" | grep "$4" | grep ""headers"")"
    [[ -z "${__kernel_headers}" ]] && __kernel_headers="kernel_headers"
    downloadFile "$__kernel_headers" "$5" "ERR" 

    local __kernel_image="$(echo "$__cmd_ret_getkernel" | grep "$3" | grep "$4" | grep ""image"")"
    [[ -z "${__kernel_image}" ]] && __kernel_image="kernel_image"
    downloadFile "$__kernel_image" "$5" "WARN" 

    local __kernel_modules="$(echo "$__cmd_ret_getkernel" | grep "$3" | grep "$4" | grep ""modules"")"
    [[ -z "${__kernel_modules}" ]] && __kernel_modules="kernel_modules"
    downloadFile "$__kernel_modules" "$5" "WARN" 

echo "Done"
}

# Update the Linux Kernel
# Input $1: OS Distro
# Input $2: Current kernel
# Input $3: To download kernel version
# Input $4: System Arch
function updateKernel {
    local __kernel_type="$2"

    # Remove linux temp
    if ls /tmp/linux-* >/dev/null 2>&1; then
	rm /tmp/linux-*
    fi

echo $TEMP_DIRECTRORY

    case "$1" in
        "Ubuntu") [[ ! -z "${__kernel_type##*-}" ]] && __kernel_type=${__kernel_type##*-} || __kernel_type=${__kernel_type#*-}
	          getKernel "$UBUNTU_KERNEL_URL" "$3" "$4" "$__kernel_type" "$TEMP_DIRECTRORY" ;;

        "RedHat") logPrint "ERR" "Update Kernel: OS Distro Not Supported!" "$1" "${FAIL}" ;;
	"CentOS") logPrint "ERR" "Update Kernel: OS Distro Not Supported!" "$1" "${FAIL}" ;;
        *) 	  logPrint "ERR" "Update Kernel: OS Distro Not Supportedxx!" "$1" "${FAIL}" ;;
    esac   

# Installing kernel
#${SUDO} dpkg -i linux*.deb

}

# Download file from URL
# Input $1: URL
# Input $2: Output Path
# Input $3: Error type [ERR (stop the execution), WARN (only show the warning an keep running)]
function downloadFile {
    local __err_type_downloadFile
    local __cmd_ret_downloadFile

    wget -P $2 $1 >/dev/null 2>&1
    __cmd_ret_downloadFile="$?"
    checkReturn "$__cmd_ret_downloadFile" "wget -O $2 $1" "$3" "There was a problem downloading this package!"
}
