#!/usr/bin/env bash

# Get kernel from the Linux Kernel mainline
# Input $1: kernel URL
# Input $2: kernel version
# Input $3: System Arch
# Input $4: kernel type
# Input $5: Output Path
function getKernel {
    # Get the last kernel version
    startLoadBar "Fetch the kernel URL"
    local __valid_chars='[a-zA-Z0-9.-]*'
    local __cmd_ret_getkernel=($(curl -sL "$1?C=M;O=D" | grep v"$2" | sed -n 's/.*href="\('$__valid_chars'\).*/\1/p' | awk '{print($0)}'))
    local __kernel_version="${__cmd_ret_getkernel[0]}"
    
    [[ -z "${__kernel_version}" ]] && logPrint "ERR" "No kernel found with this version!" "$2" "${FAIL}"

    # Get download URLs
    __cmd_ret_getkernel="$(lynx -dump -listonly -nonumbers "$1${__kernel_version}" | grep -v ""BUILD.LOG"" | sort | uniq)"
    [[ -z "${__cmd_ret_getkernel}" ]] && logPrint "ERR" "No kernel found with this version!" "${__kernel_version}" "${FAIL}"
    stopLoadBar



    # Download the shared headers
    local __kernel_headers_all="$(echo "$__cmd_ret_getkernel" | grep ""headers"" | grep -m 1 ""all"")"
    [[ -z "${__kernel_headers_all}" ]] && logPrint "ERR" "No kernel shared headers found with this version!" "${__kernel_version}" "${FAIL}"
    downloadFile "$__kernel_headers_all" "$5" "ERR" "Download kernel shared headers" 

    # Download the kernel headers
    local __kernel_headers="$(echo "$__cmd_ret_getkernel" | grep "$3" | grep "$4" | grep -m 1 ""headers"")"
    [[ -z "${__kernel_headers}" ]] && logPrint "ERR" "No kernel headers found with this version!" "${__kernel_version}" "${FAIL}"
    downloadFile "$__kernel_headers" "$5" "ERR" "Download kernel headers" 

    # Download the kernel image
    local __kernel_image="$(echo "$__cmd_ret_getkernel" | grep "$3" | grep "$4" | grep -m 1 ""image"")"
    [[ -z "${__kernel_image}" ]] && logPrint "ERR" "No kernel image found with this version!" "${__kernel_version}" "${FAIL}"
    downloadFile "$__kernel_image" "$5" "ERR" "Download kernel image"

    # Download the kernel modules
    local __kernel_modules="$(echo "$__cmd_ret_getkernel" | grep "$3" | grep "$4" | grep -m 1 ""modules"")"
    [[ -z "${__kernel_modules}" ]] && __kernel_modules="kernel_modules"
    downloadFile "$__kernel_modules" "$5" "WARN" "Download kernel modules"
    stopLoadBar "Download Completed Successfully." "DONE" 
}

# Update the Linux Kernel
# Input $1: OS Distro
# Input $2: Current kernel
# Input $3: System Arch
function updateKernel {
    local __kernel_type_updateKernel="$2"
    local __sys_arch_updateKernel="$3"

    # Get the recommended kernel
    local __default_kernel=()
    getYAMLValue "os_support|${__distro_checkOS}|kernel|default" YAML_ARRAY __default_kernel



    logPrint "NOTE" "A kernel update to version "${__default_kernel[0]}" is required to complete this setup."
    confirmYn "Update kernel? [Y/n] " || logPrint "ERR" "Update Kernel: OS Kernel Not Supported!" "$2" "${FAIL}"

    # Remove linux temp
    if ls /tmp/linux-* >/dev/null 2>&1; then
	rm /tmp/linux-*
    fi

    logPrint "STEP" "Download the Kernel packages"
    case "$1" in
        "Ubuntu") [[ ! -z "${__kernel_type_updateKernel##*-}" ]] && __kernel_type_updateKernel=${__kernel_type_updateKernel##*-} \
		                                                 || __kernel_type_updateKernel=${__kernel_type_updateKernel#*-}
	          getKernel "$UBUNTU_KERNEL_URL" "${__default_kernel[0]}" "$__sys_arch_updateKernel" "$__kernel_type_updateKernel" "$TEMP_DIRECTRORY" ;;

        "RedHat") logPrint "ERR" "Update Kernel: OS Distro Not Supported!" "$1" "${FAIL}" ;;
	"CentOS") logPrint "ERR" "Update Kernel: OS Distro Not Supported!" "$1" "${FAIL}" ;;
        *) 	  logPrint "ERR" "Update Kernel: OS Distro Not Supported!" "$1" "${FAIL}" ;;
    esac   

    # kernel Installation
    logPrint "STEP" "Install the Kernel packages"
    startLoadBar "Install kernel packages"
    dpkg -i "$TEMP_DIRECTRORY/linux*.deb" >/dev/null 2>&1
    __cmd_ret_updateKernel="$?"
    [ $__cmd_ret_updateKernel -ne 0 ] && stopLoadBar "There was a problem installing the kernel!" "ERR" "dpkg -i $TEMP_DIRECTRORY/linux*.deb" || stopLoadBar "Download Completed Successfully."

    echo "test"
     
    checkReturn "$__cmd_ret_updateKernel" "dpkg -i" "ERR" "There was a problem installing the kernel!" 
}

    if [ -f /var/run/reboot-required ]; then
        echo 'reboot required'
       logPrint "ERR" "Reboot Required! Please run this script after the reboot." "Update Kernel" "${FAIL}"
    fi

}
