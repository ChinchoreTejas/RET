#!/usr/bin/env bash

# Print the message/inser to the log file 
# Input $1: type [STEP (for one of the main steps), DET (for detailed info), ERR (for error), NOTE ( for note)]
# Input $2: title
# Input $3: value (only for type [DET, ERR])
# Input $4: State [SUCC, FAIL]
function logPrint {
    # Init input variables 
    local __type=$1
    local __title=$2
    local __value=$3

    if [ "${__type}" = "STEP" ]; then
        echo
	echo -e "${STEP}${__title}...${END}";
    elif [ "${__type}" = "DET" ]; then
        local __state=$4
        local __msg=$(printf '\t%-10s' "${__title}")
        printf '%-25s' "$__msg .........."
        echo -e "${__state}${__value}${END}";
    elif [ "${__type}" = "ERR" ]; then
        echo
	echo -e "${ERR}${__title}...[${__value}]${END}";
        exit 2
    elif [ "${__type}" = "WARN" ]; then
        echo
	echo -e "${WARN}${__title}...[${__value}]${END}";
    elif [ "${__type}" = "NOTE" ]; then
        echo
	echo -e "${NOTE}${__title}${END}";
    fi
}


# Check OS, Distro and kernel
# Input $1: array with the Distro
function checkOs {
    local __state="${SUCC}"
    local __failed

    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        getOSInfo OS REL KERNEL ARCH

	# Check distro name
        if (! isSupported "os_support|os" "${OS}"); then 
	    __state="${FAIL}" 
	    __failed="NSDISTRO" 
        fi
        logPrint "DET" "OS" "${OS}" "${__state}"

	# Check Release version
	__state="${SUCC}"
        if (! isSupported "os_support|${OS}|release" "${REL}"); then
	    __state="${FAIL}" 
            [ -z "$__failed" ] && __failed="NSREL"
	fi
	logPrint "DET" "RELEASE" "${REL}" "${__state}"

	# Check just Kernel and major revision
        local __kernel_version="${KERNEL%%.*}"
        local __major_revision="${KERNEL#*.}"
        __major_revision="${__major_revision%%.*}"

        __state="${SUCC}"
        if (! isSupported "os_support|${OS}|kernel|version" "s${__kernel_version}.${__major_revision}"); then
	    __state="${FAIL}" 
	    [ -z "$__failed" ] && __failed="NSKERNEL"
	fi
        logPrint "DET" "KERNEL" "${KERNEL}" "${__state}"

	# Just print the current Arch
	logPrint "DET" "ARCH" "${ARCH}" "${SUCC}"
    else
        logPrint "ERR" "OS Not Supported!" "$OSTYPE" "${FAIL}"
    fi

    case "$__failed" in
        "NSDISTRO") logPrint "ERR" "OS distro Not Supported!" "${OS}" "${FAIL}" ;;
        "NSREL")    logPrint "ERR" "OS release Not Supported!" "${REL}" "${FAIL}" ;;
        "NSKERNEL") logPrint "WARN" "OS kernel Not Supported!" "${KERNEL}" "${FAIL}" ;;
        *) # Do nothing ;;
    esac    
}

# Convert string from ">=4.13 <=4.18" to array like [4.13, 4.14, 4.15, 4.16, 4.17, 4.18]
# Input $1: string to convert
function str2ArrayRange {
    local __str=$1
    local __s='[[:space:]]*' 
    local __digit='[0-9.]*'

    echo $__str | sed -n 's|^.*>='$__s'\('$__digit'\)[[:space:]]<='$__s'\('$__digit'\).*|\1-\2|p' |
    awk 'BEGIN{FS="-";}{for (i=$1; i<$2; i+=0.01) { print(i); }}'
}

# Check if value exists in the supported array items
# Input $1: Key to look for in array
# Input $2: Value to check if it supported
function isSupported {
    local __key=$1
    local __val=$2
    local __ret_array=()
    local __index=-1

    getYAMLValue "${__key}" YAML_ARRAY __ret_array
  
    # Check if __ret_array needs to be interept (If sym. like >=, <=, <, etc.)
    if [[ "${__ret_array[0]}" == *'>='*'<='* ]]; then
        __ret_array=$(str2ArrayRange "${__ret_array[0]}") 
        IFS=$'\r\n' eval  __ret_array='(${__ret_array})'
    fi

    (isInArray "__ret_array" "${__val}" __index) && return 0;
    return 1;
}

# Check if the required dependencies are installed
# Input $1: array with the name of deps
# Input $2: array with the version of deps
function checkDeps {
    local -n __name_array=$1
    local -n __ver_array=$2
    local __idx=0
    local __dep_toInstall
    local __DEPS_TOINSTALL=() # Array of deps


    logPrint "STEP" "Verifying Dependencies"
    for dep in "${__name_array[@]}"; do
	if isPrgInstalled "${dep}"; then
            logPrint "DET" "${dep}" "Found" "${SUCC}"
        else
	    __dep_toInstall="${dep}"

            # Get Version
	    local __version="${__ver_array[$__idx]}"
            [ "$__version" != "latest" ] && __dep_toInstall="${dep}=${__version}"

	    __DEPS_TOINSTALL+=("${__dep_toInstall}")
            logPrint "DET" "${dep}" "Not Found!" "${FAIL}"
        fi
	((__idx++))
    done

    # Install deps if needed
    logPrint "NOTE" "The above not installed packages are required to complete this setup."
    if [ "${#__DEPS_TOINSTALL[@]}" -ne 0 ]; then
        confirmYn "Install dependencies? [Y/n] " && installPkg __DEPS_TOINSTALL
    fi
}


# Read and parse yaml file 
# Input $1: yaml file name
# Note: this parser support only the syntax needed. Flow Styles are not supported
function parse_yaml {
    local __file_name=$1
    local __s='[[:space:]]*' 
    local __w='[a-zA-Z0-9_]*' 
    local __fs=${__fs:-$(echo @|tr @ '\034')}
    local __q=''\"\'''
    local __sep=\"\|\"
    local __br_eq=\":=\"

    local __rm_bl='/^$/d' # rm black lines
    local __rm_sp='s|'$__s'$||g;' # rm spaces at the end of the lines
    local __rm_doc_begin='s|^'$__s'\(---\)'$__s'||g' # rm doc begin
    local __rm_doc_end='s|^'$__s'\(\.\.\.\)'$__s'||g' # rm doc end


    local __rm_cmt='s|^'$__s'#.*||g' # rm line begin with #
    local __rm_il_cmt='/#['$__q']/!s|[[:space:]]#.*||g' # rm inline comment
    local __get_item_list='s|^\('$__s'\)-'$__s'\('$__w'\)'$__s':'$__s'\(.*\)'$__s'$|\1'$__fs'\2'$__fs'\3|g' # - key: value
    local __get_map_list='s|^\('$__s'\)\('$__w'\)'$__s'[:-]'$__s'\(.*\)'$__s'$|\1'$__fs'\2'$__fs'\3|g' # map detection key: value, key: 'value', key: "value"


    cat $__file_name | \
        sed -e $__rm_sp -e $__rm_doc_begin -e $__rm_doc_end -e $__rm_cmt -e $__rm_il_cmt -e $__rm_bl -e $__get_item_list -e $__get_map_list | \
	
    awk -F$__fs 'BEGIN{
        last_indent = 0; br_count = 0;
    }
    {
        #The suggested syntax for YAML files is to use 2 spaces for indentation
        indent = length($1)/2;
	

        # extract the dictionarie key 
	if(length($2)!= 0){node[indent] = $2}

	# extract the value
	value= (length($3)!= 0)? $3: "null";

	# reinit child elements
	if(indent < last_indent){for(i=indent+1; i <= last_indent; i++){delete node[i]; idx[i]=0;}}
	last_indent = indent;

	br=""; for (i=0; i<indent; i++) {br=(br)(node[i])('$__sep')}
        branch=br node[indent];
	

	# remove the last char
        if(length(node[indent]) == 0){branch = substr(branch, 1, length(branch)-1)}

	# Check if branch already exists
	# update if true; else insert new value
	isBrExists = 0;
	for(i in br_array){
            split(br_array[i], tmp_br, '$__br_eq');
		
            if(branch == tmp_br[1]){
	        br_array[i] = branch '$__br_eq' tmp_br[2]";"value; 
		isBrExists = 1;
	    }
	}

	if(isBrExists == 0){
	    # put valid branch in array
	    if(value != "null"){
	        br_array[br_count] = branch '$__br_eq' value;
		br_count++;
	    }
	}
    }END{
	for(i=0; i<=br_count; i++){print(br_array[i]);}
    }'
}


# Parser yaml file into array
# Input $1: yaml file name
# Output $2: Return Array
function yaml2arr {
    local __yaml_file=$1
    local __res_array=$2

    # Make Sanity Check
    fileSanityCheck $__yaml_file

    local __array=$(parse_yaml $__yaml_file)
    IFS=$'\r\n' eval  $__res_array='(${__array})'
    #echo "${__res_array[3]}"
}

# Get value yaml value by key
# Input $1: Key 
# Input $2: YAML_Array Ref
# Input $3: Output Array
function getYAMLValue {
    local __key=$1
    local -n __ref_yaml_array=$2
    local __ref_yaml_val_array=$3
    
    if isInArray "__ref_yaml_array" "${__key}:=" INDEX; then
        local __value="${__ref_yaml_array[$INDEX]#*:=}" # get the value part
        IFS=$';' eval  $__ref_yaml_val_array='(${__value})'
        return 0;
    else
        logPrint "ERR" "No Dependencies Found with this key!" "$__key" "${FAIL}"
	return 1;
    fi
}

# Check if array contains value
# Input $1: Array Ref
# Input $2: Vaue/Key
# Output $3: item index
function isInArray {
    local -n __ref_in_array=$1
    local __key=$2
    local __idx=$3
    local __index=0

    for item in "${__ref_in_array[@]}"; do
        if [[ "${item}" == ${__key}* ]] ; then
	    eval $__idx="'$__index'"
	    return 0;
        fi
        ((__index++))
    done
    return 1;
}

# Check if program is installed
# Input $1: program name
# Return 0,1
function isPrgInstalled {
	# Init to found eq true
  	# 0 means no failure and non-0 means failure.
	local __found=0

	# update value if not found
  	type $1 >/dev/null 2>&1 || { __found=1; }

	return $__found;
}

# Get OS and Version
# Return OS, Version, Kernel and the Architecture
function getOSInfo {
	# Init output variables 
	local __res_os=$1
	local __res_ver=$2
	local __res_kernel=$3
	local __res_arch=$4

	local __OS
	local __VER
	local __ARCH
	local __KERNEL=$(uname -r)

	if [ -f /etc/os-release ]; then
		. /etc/os-release
		__OS=$NAME
		__VER=$VERSION_ID
	elif [ -f /etc/lsb-release ]; then
		. /etc/lsb-release
	        __OS=$DISTRIB_ID
		__VER=$DISTRIB_RELEASE
	else
		__OS=$(uname -s)
		__VER=$(uname -r)
	fi

	# Get OS Architecture
	if [ $(uname -m) == 'x86_64' ]; then
		__ARCH=x64
	else
		__ARCH=x86
	fi

	eval $__res_os="'$__OS'"
	eval $__res_ver="'$__VER'"
	eval $__res_kernel="'$__KERNEL'"
	eval $__res_arch="'$__ARCH'"
}


# Check if file exists and not empty
# Input $1: file name
# Return Error and exit the exec
function fileSanityCheck {
    # Check if file exists
    if [ ! -f $1 ]; then
        logPrint "ERR" "File Not Found!" "$1"
    fi

    if [ ! -s $1 ]; then
        logPrint "ERR" "File is empty!" "$1"
    fi
}

# Get user confirmation of Y/n 
# Input $1: message (optional)
# Return 0,1
function confirmYn {
    read -r -p "${1:-Are you sure? [Y/n] }" REPLY
    if [[ ${REPLY} =~ ^[Yy] ]] || [[ -z "${REPLY}" ]]; then
        return 0;
    fi
    return 1;
}

# Check if user has sudo or root privileges
# Return 0,1
function isSudo {
    if [ "$EUID" -ne 0 ]; then
        return 1;
    fi
    return 0;
}

# Install package
# Input $1: package array
# Return 0,1
function installPkg {
    local -n __packages=$1

    # fix broken dependencies in place
    apt-get install -fqq >/dev/null 2>&1
    checkReturn "$?" "WARN" "apt-get install -f"

    # Updates the package lists
    apt-get update &>/dev/null

    for dep in "${__packages[@]}"; do
        apt-get -qq -y install "${dep}" &>/dev/null
        checkReturn "$?" "ERR" "apt-get install ${dep}"
    done
}


# Check if command return error
# Input $1: Return State
# Input $2: Error type [ERR (stop the execution), WARN (only show the warning an keep running)]
# INput $3: The cmd causing the error
function checkReturn {
    local __state=$1
    local __type=$2
    local __cmd=$3

    if [ "$__state" -ne 0 ]; then
        logPrint "$__type" "An error occurred while executing the command!" "$__cmd"
    fi
}

