#!/bin/bash

function logPrint(){
	# Init input variables 
        local __type=$1
	local __title=$2

	if [ "${__type}" = "STEP" ]; then
		echo
		echo -e "${STEP}${__title}...${END}";
	else
		local __value=$3
	        local __state=$4
		local __msg=$(printf '\t%-10s' "${__title}")
        	printf '%-25s' "$__msg .........."
        	echo -e "${__state}${__value}${END}";
	fi
}


function checkDeps(){
	logPrint "STEP" "Verifying Dependencies"
	while read -r dep || [[ -n "$dep" ]]; do
		if isPrgInstalled $dep; then
			logPrint "${dep}" "Found" "${SUCC}"
		else
			logPrint "${dep}" "Found" "${FAIL}"
		fi
	done < "$1"
}

parse_yaml() {
    local __file_name=$1
    local __s='[[:space:]]*' 
    local __w='[a-zA-Z0-9_]*' 
    local __fs=${fs:-$(echo @|tr @ '\034')}
    local __q=''\"\'''
    local xx=" #.*"

    local __rm_bl='/^$/d' # rm black lines
    local __rm_sp='s|'$__s'$||g;' # rm spaces at the end of the lines
    local __rm_doc_begin='s|^'$__s'\(---\)'$__s'||g' # rm doc begin
    local __rm_doc_end='s|^'$__s'\(\.\.\.\)'$__s'||g' # rm doc end


    local __rm_cmt='s|^'$__s'#.*||g' # rm line begin with #
    local __rm_il_cmt='/#.*['$__q']/!s|[[:space:]]#.*||g' # rm inline comment
    local __get_map_list='s|^\('$__s'\)\('$__w'\)'$__s'[:-]'$__s'\(.*\)'$__s'$|\1'$__fs'\2'$__fs'\3|g' # map detection key: value, key: 'value', key: "value"

    #'/\b\(True\|true\|yes\|on\)\b/' # true
    #'/\b\(False\|false\|no\|off\)\b/' # false

    sed -e $__rm_sp -e $__rm_doc_begin -e $__rm_doc_end -e $__rm_cmt -e $__rm_bl -e $__get_map_list requirements/os_req.yml
}

#################################################
# @param $1: The yaml file to check if there is
#       a key
# @param $2: The key to check if it exists
# @echo: $Ash__TRUE if the key exists,
#       $Ash__FALSE otherwise
#################################################
YamlParse__has_key() {
    local line=$(grep -x "^$2:.*" "$1")
    if [[ "$line" != "" ]]; then
        echo "$Ash__TRUE"
    else
        echo "$Ash__FALSE"
    fi
}

# Check if program is installed
# Return 0,1
function isPrgInstalled {
	# Init to found eq true
  	# 0 means no failure and non-0 means failure.
	local __found=0

	# update value if not found
  	type $1 >/dev/null 2>&1 || { __found=1; }

	return $__found
}

# Get OS and Version
# Return OS, Version, Kernel and the Architecture
function getOSInfo(){
	# Init output variables 
	local __res_os=$1
	local __res_ver=$2
	local __res_kernel=$3
	local __res_arch=$4

	local __OS
	local __VER
	local __ARCH
	local __KERNEL=$(uname -r)

	if [ -f /etc/os-release ]; then
		. /etc/os-release
		__OS=$NAME
		__VER=$VERSION_ID
	elif [ -f /etc/lsb-release ]; then
		. /etc/lsb-release
	        __OS=$DISTRIB_ID
		__VER=$DISTRIB_RELEASE
	else
		__OS=$(uname -s)
		__VER=$(uname -r)
	fi

	# Get OS Architecture
	if [ $(uname -m) == 'x86_64' ]; then
		__ARCH=x64
	else
		__ARCH=x86
	fi

	eval $__res_os="'$__OS'"
	eval $__res_ver="'$__VER'"
	eval $__res_kernel="'$__KERNEL'"
	eval $__res_arch="'$__ARCH'"
}

